{
  "JUsmaa/act_ntp_s3": {
    "repositoryUrl": "JUsmaa/act_ntp_s3",
    "studentName": "Julian Usma Perez",
    "activities": [
      {
        "activityDescription": "Usando un ciclo for, imprime los números enteros del 0 al 9, cada uno en una línea.",
        "solutionFile": "src/ejercicio_01.py",
        "score": 3,
        "fileFound": true,
        "feedback": "El código imprime los números del 1 al 9, pero la actividad pedía del 0 al 9. Además, la impresión incluye texto innecesario (\"numero =\"). Deberías usar `range(0, 10)` y `print(numero)`."
      },
      {
        "activityDescription": "Mediante un ciclo while, imprime los números enteros del 10 al 1 en orden descendente, cada número en una línea.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y funcional. El uso del ciclo `while` y el decremento de la variable `i` son los adecuados. Aunque el `break` es redundante, no afecta la funcionalidad."
      },
      {
        "activityDescription": "Con un ciclo for, calcula la suma de todos los enteros del 1 al 100 (inclusive) y muestra el resultado.",
        "solutionFile": "src/ejercicio_03.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Sin embargo, el resultado final debe mostrarse una única vez, fuera del ciclo for, en lugar de mostrar la suma acumulada en cada iteración."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese números. El proceso termina cuando el usuario escriba 0. Al final, muestra la suma total de todos los números ingresados.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa, cumpliendo con todos los requisitos. El código es legible y funcional."
      },
      {
        "activityDescription": "Con un ciclo for, imprime la tabla de multiplicar del 7, es decir, 7 × 1, 7 × 2, …, 7 × 10, cada resultado en una línea.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y cumple con los requisitos. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra los primeros 15 múltiplos de 3, comenzando desde 3.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con el objetivo planteado usando un ciclo while de manera apropiada."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas letras 'a' (minúscula) hay en la cadena texto = \"manzana\" y muestra el total.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 5,
        "fileFound": true,
        "feedback": "¡Excelente solución! El código es conciso, claro y resuelve el problema planteado de manera eficiente. Bien hecho."
      },
      {
        "activityDescription": "Usando un ciclo while, calcula y muestra los cuadrados de los números del 1 al 20 (1², 2², …, 20²), cada resultado en una línea.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. El código funciona según lo solicitado y es fácil de entender."
      },
      {
        "activityDescription": "Con un ciclo for, imprime todos los números pares del 2 al 50 (ambos inclusive), cada número en una línea.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y eficiente. El código es limpio y sigue las buenas prácticas al usar el `range` con un paso para iterar directamente sobre los números pares."
      },
      {
        "activityDescription": "Mediante un ciclo while, solicita al usuario que escriba palabras. El proceso termina cuando el usuario escriba la palabra \"fin\". Al final, muestra cuántas palabras se leyeron (sin contar \"fin\").",
        "solutionFile": "src/ejercicio_10.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. El código cumple con los requisitos del problema y sigue buenas prácticas."
      },
      {
        "activityDescription": "Con un ciclo for, imprime cada carácter de la palabra \"python\" en una línea separada.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código es legible y cumple con los requerimientos del ejercicio."
      },
      {
        "activityDescription": "Utilizando un ciclo while, calcula el factorial de un número entero n introducido por el usuario y muestra el resultado.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con el objetivo de la actividad de manera concisa."
      },
      {
        "activityDescription": "Con un ciclo for, imprime los números del 1 al 30 saltando de 3 en 3 (1, 4, 7, …, 28), cada número en una línea.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y eficiente. Utiliza el ciclo `for` y la función `range` de manera adecuada para cumplir con los requisitos del problema."
      },
      {
        "activityDescription": "Mediante un ciclo while, implementa un juego de adivinanza: el programa genera un número aleatorio del 1 al 10 y solicita al usuario que lo adivine. El proceso se repite hasta que el usuario acierte. Muestra un mensaje de felicitación al final.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 5,
        "fileFound": true,
        "feedback": "¡Excelente solución! El código es limpio, funcional y cumple con todos los requisitos de la actividad. Se utilizan buenas prácticas de programación."
      },
      {
        "activityDescription": "Con un ciclo for, imprime un triángulo rectángulo de 5 filas usando el carácter '*'.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y fácil de entender, cumpliendo con el objetivo del ejercicio."
      },
      {
        "activityDescription": "Utilizando un ciclo while, simula un reloj digital que muestre cada segundo desde 00:00 hasta 00:59 en formato MM:SS, cada valor en una línea.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Solución correcta y concisa. El código cumple con el objetivo de la actividad y utiliza el formato de salida esperado."
      },
      {
        "activityDescription": "Con un ciclo for, solicita al usuario que ingrese un número entero positivo y calcula la suma de sus dígitos, mostrando el resultado final.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Cumple con todos los requisitos de la actividad solicitada, utilizando un ciclo for para iterar sobre los dígitos del número ingresado y calcular la suma."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra la secuencia de Fibonacci empezando por 1, 1, 2, 3, 5, … y termina cuando se alcance el primer valor mayor que 1000.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 429 . {\"error\":{\"code\":429,\"message\":\"You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.\",\"status\":\"RESOURCE_EXHAUSTED\",\"details\":[{\"@type\":\"type.googleapis.com/google.rpc.QuotaFailure\",\"violations\":[{\"quotaMetric\":\"generativelanguage.googleapis.com/generate_content_free_tier_requests\",\"quotaId\":\"GenerateRequestsPerMinutePerProjectPerModel-FreeTier\",\"quotaDimensions\":{\"model\":\"gemini-2.0-flash\",\"location\":\"global\"},\"quotaValue\":\"15\"}]},{\"@type\":\"type.googleapis.com/google.rpc.Help\",\"links\":[{\"description\":\"Learn more about Gemini API quotas\",\"url\":\"https://ai.google.dev/gemini-api/docs/rate-limits\"}]},{\"@type\":\"type.googleapis.com/google.rpc.RetryInfo\",\"retryDelay\":\"39s\"}]}}"
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas vocales (sin distinción de mayúsculas/minúsculas) hay en la frase frase = \"programacion es divertida\" y muestra el total.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 429 . {\"error\":{\"code\":429,\"message\":\"You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.\",\"status\":\"RESOURCE_EXHAUSTED\",\"details\":[{\"@type\":\"type.googleapis.com/google.rpc.QuotaFailure\",\"violations\":[{\"quotaMetric\":\"generativelanguage.googleapis.com/generate_content_free_tier_requests\",\"quotaId\":\"GenerateRequestsPerMinutePerProjectPerModel-FreeTier\",\"quotaDimensions\":{\"model\":\"gemini-2.0-flash\",\"location\":\"global\"},\"quotaValue\":\"15\"}]},{\"@type\":\"type.googleapis.com/google.rpc.Help\",\"links\":[{\"description\":\"Learn more about Gemini API quotas\",\"url\":\"https://ai.google.dev/gemini-api/docs/rate-limits\"}]},{\"@type\":\"type.googleapis.com/google.rpc.RetryInfo\",\"retryDelay\":\"38s\"}]}}"
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese edades una a una. El proceso termina cuando se introduzca -1. Al final, muestra la edad mayor que se haya ingresado.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 429 . {\"error\":{\"code\":429,\"message\":\"You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.\",\"status\":\"RESOURCE_EXHAUSTED\",\"details\":[{\"@type\":\"type.googleapis.com/google.rpc.QuotaFailure\",\"violations\":[{\"quotaMetric\":\"generativelanguage.googleapis.com/generate_content_free_tier_requests\",\"quotaId\":\"GenerateRequestsPerMinutePerProjectPerModel-FreeTier\",\"quotaDimensions\":{\"location\":\"global\",\"model\":\"gemini-2.0-flash\"},\"quotaValue\":\"15\"}]},{\"@type\":\"type.googleapis.com/google.rpc.Help\",\"links\":[{\"description\":\"Learn more about Gemini API quotas\",\"url\":\"https://ai.google.dev/gemini-api/docs/rate-limits\"}]},{\"@type\":\"type.googleapis.com/google.rpc.RetryInfo\",\"retryDelay\":\"37s\"}]}}"
      }
    ],
    "overallScore": 4.1,
    "totalActivities": 20,
    "completedActivities": 17,
    "summary": "Excelente trabajo. Completó 17/20 actividades (85%) con una calificación promedio de 4.1/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Completar los archivos faltantes: src/ejercicio_18.py, src/ejercicio_19.py, src/ejercicio_20.py"
    ],
    "evaluatedAt": "2025-08-01T03:29:23.511Z",
    "evaluatedBy": "Sistema de Evaluación"
  },
  "CristianSierra420/act_ntp_s3": {
    "repositoryUrl": "CristianSierra420/act_ntp_s3",
    "studentName": "Cristian Andrés  Sierra Duque",
    "activities": [
      {
        "activityDescription": "Usando un ciclo for, imprime los números enteros del 0 al 9, cada uno en una línea.",
        "solutionFile": "src/ejercicio_01.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código es legible y cumple con el objetivo planteado de manera eficiente."
      },
      {
        "activityDescription": "Mediante un ciclo while, imprime los números enteros del 10 al 1 en orden descendente, cada número en una línea.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y eficiente. Cumple con todos los requisitos del problema y utiliza buenas prácticas de programación."
      },
      {
        "activityDescription": "Con un ciclo for, calcula la suma de todos los enteros del 1 al 100 (inclusive) y muestra el resultado.",
        "solutionFile": "src/ejercicio_03.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 503 . {\"error\":{\"code\":503,\"message\":\"The model is overloaded. Please try again later.\",\"status\":\"UNAVAILABLE\"}}"
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese números. El proceso termina cuando el usuario escriba 0. Al final, muestra la suma total de todos los números ingresados.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con los requisitos del problema. Buen trabajo."
      },
      {
        "activityDescription": "Con un ciclo for, imprime la tabla de multiplicar del 7, es decir, 7 × 1, 7 × 2, …, 7 × 10, cada resultado en una línea.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 503 . {\"error\":{\"code\":503,\"message\":\"The model is overloaded. Please try again later.\",\"status\":\"UNAVAILABLE\"}}"
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra los primeros 15 múltiplos de 3, comenzando desde 3.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio, fácil de entender y cumple con los requisitos de la actividad. ¡Excelente trabajo!"
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas letras 'a' (minúscula) hay en la cadena texto = \"manzana\" y muestra el total.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 5,
        "fileFound": true,
        "feedback": "¡Excelente solución! El código es claro, conciso y resuelve el problema correctamente. Se adhiere a las buenas prácticas."
      },
      {
        "activityDescription": "Usando un ciclo while, calcula y muestra los cuadrados de los números del 1 al 20 (1², 2², …, 20²), cada resultado en una línea.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con todos los requisitos del ejercicio."
      },
      {
        "activityDescription": "Con un ciclo for, imprime todos los números pares del 2 al 50 (ambos inclusive), cada número en una línea.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, eficiente y cumple con todos los requisitos del ejercicio. El uso de `range(2, 51, 2)` es la forma más elegante de resolverlo."
      },
      {
        "activityDescription": "Mediante un ciclo while, solicita al usuario que escriba palabras. El proceso termina cuando el usuario escriba la palabra \"fin\". Al final, muestra cuántas palabras se leyeron (sin contar \"fin\").",
        "solutionFile": "src/ejercicio_10.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y cumple con los requisitos. El código es limpio y fácil de entender, aplicando buenas prácticas como usar `.lower()` para hacer la comparación insensible a mayúsculas."
      },
      {
        "activityDescription": "Con un ciclo for, imprime cada carácter de la palabra \"python\" en una línea separada.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 5,
        "fileFound": true,
        "feedback": "¡Excelente! La solución es correcta, concisa y cumple con todos los requisitos del ejercicio. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Utilizando un ciclo while, calcula el factorial de un número entero n introducido por el usuario y muestra el resultado.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es claro, bien estructurado y cumple con el objetivo de calcular el factorial utilizando un ciclo while."
      },
      {
        "activityDescription": "Con un ciclo for, imprime los números del 1 al 30 saltando de 3 en 3 (1, 4, 7, …, 28), cada número en una línea.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, claro y cumple con los requisitos del problema utilizando la función `range` de forma correcta para generar la secuencia deseada."
      },
      {
        "activityDescription": "Mediante un ciclo while, implementa un juego de adivinanza: el programa genera un número aleatorio del 1 al 10 y solicita al usuario que lo adivine. El proceso se repite hasta que el usuario acierte. Muestra un mensaje de felicitación al final.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 5,
        "fileFound": true,
        "feedback": "¡Excelente solución! El código resuelve correctamente el problema planteado, es legible y bien estructurado. Se puede mejorar la experiencia de usuario añadiendo pistas (mayor/menor) al jugador."
      },
      {
        "activityDescription": "Con un ciclo for, imprime un triángulo rectángulo de 5 filas usando el carácter '*'.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "¡Excelente solución! El código es conciso, correcto y cumple con la descripción de la actividad. Buena utilización del ciclo for y la multiplicación de cadenas."
      },
      {
        "activityDescription": "Utilizando un ciclo while, simula un reloj digital que muestre cada segundo desde 00:00 hasta 00:59 en formato MM:SS, cada valor en una línea.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con el objetivo de simular el reloj digital, incluyendo el uso de time.sleep(1) para simular el paso del tiempo."
      },
      {
        "activityDescription": "Con un ciclo for, solicita al usuario que ingrese un número entero positivo y calcula la suma de sus dígitos, mostrando el resultado final.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código resuelve correctamente el problema, es legible y aplica buenas prácticas como la validación de dígitos. ¡Muy bien!"
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra la secuencia de Fibonacci empezando por 1, 1, 2, 3, 5, … y termina cuando se alcance el primer valor mayor que 1000.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Se puede mejorar la legibilidad inicializando numero2 con 1 para seguir estrictamente la secuencia de Fibonacci descrita (1, 1, 2, 3...). La condición `if numero1 > 1000` dentro del bucle es redundante."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas vocales (sin distinción de mayúsculas/minúsculas) hay en la frase frase = \"programacion es divertida\" y muestra el total.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 4,
        "fileFound": true,
        "feedback": "El código funciona correctamente y cuenta las vocales. Sin embargo, la frase utilizada en el código no coincide con la descripción de la actividad. Se debe utilizar la frase 'programacion es divertida' para cumplir con los requisitos de la tarea."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese edades una a una. El proceso termina cuando se introduzca -1. Al final, muestra la edad mayor que se haya ingresado.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 2,
        "fileFound": true,
        "feedback": "El código tiene errores lógicos. No itera correctamente para obtener múltiples edades y siempre muestra solo la primera edad ingresada, además de que la condición `edad_mayor = edad` dentro del bucle solo actualiza si la edad es válida, pero no compara si es la mayor hasta el momento, y el bucle se rompe inmediatamente después de la primera edad válida. El mensaje de 'No se ingresó una edad válida' es incorrecto."
      }
    ],
    "overallScore": 4.25,
    "totalActivities": 20,
    "completedActivities": 18,
    "summary": "Excelente trabajo. Completó 18/20 actividades (90%) con una calificación promedio de 4.3/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Completar los archivos faltantes: src/ejercicio_03.py, src/ejercicio_05.py",
      "Revisar y mejorar las actividades con calificación baja"
    ],
    "evaluatedAt": "2025-08-21T13:39:54.141Z",
    "evaluatedBy": "Sistema de Evaluación Masiva"
  },
  "VictorPolo28/act_ntp_s3": {
    "repositoryUrl": "VictorPolo28/act_ntp_s3",
    "studentName": "Victor  Manuel Polo Ruedas",
    "activities": [
      {
        "activityDescription": "Usando un ciclo for, imprime los números enteros del 0 al 9, cada uno en una línea.",
        "solutionFile": "src/ejercicio_01.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Cumple con todos los requisitos de la actividad de manera eficiente."
      },
      {
        "activityDescription": "Mediante un ciclo while, imprime los números enteros del 10 al 1 en orden descendente, cada número en una línea.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y fácil de entender. ¡Buen trabajo!"
      },
      {
        "activityDescription": "Con un ciclo for, calcula la suma de todos los enteros del 1 al 100 (inclusive) y muestra el resultado.",
        "solutionFile": "src/ejercicio_03.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con el objetivo de la actividad."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese números. El proceso termina cuando el usuario escriba 0. Al final, muestra la suma total de todos los números ingresados.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 4,
        "fileFound": true,
        "feedback": "El código resuelve correctamente el problema planteado. Sin embargo, podría mejorarse la validación de la entrada para evitar errores si el usuario ingresa un valor no numérico. Además, se podrían agregar comentarios más descriptivos."
      },
      {
        "activityDescription": "Con un ciclo for, imprime la tabla de multiplicar del 7, es decir, 7 × 1, 7 × 2, …, 7 × 10, cada resultado en una línea.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio, legible y cumple con el objetivo planteado."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra los primeros 15 múltiplos de 3, comenzando desde 3.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 4,
        "fileFound": true,
        "feedback": "El código cumple con la funcionalidad requerida, pero podría ser más claro inicializando `multiplo = 3` y controlando el bucle con una condición diferente para evitar el `if`. Además, se podría usar una variable para llevar la cuenta de los múltiplos impresos."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas letras 'a' (minúscula) hay en la cadena texto = \"manzana\" y muestra el total.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y fácil de entender. ¡Buen trabajo!"
      },
      {
        "activityDescription": "Usando un ciclo while, calcula y muestra los cuadrados de los números del 1 al 20 (1², 2², …, 20²), cada resultado en una línea.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con los requisitos de la actividad."
      },
      {
        "activityDescription": "Con un ciclo for, imprime todos los números pares del 2 al 50 (ambos inclusive), cada número en una línea.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, claro y resuelve correctamente el problema utilizando un ciclo `for` con el `step` adecuado para imprimir números pares."
      },
      {
        "activityDescription": "Mediante un ciclo while, solicita al usuario que escriba palabras. El proceso termina cuando el usuario escriba la palabra \"fin\". Al final, muestra cuántas palabras se leyeron (sin contar \"fin\").",
        "solutionFile": "src/ejercicio_10.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. El código cumple con el objetivo planteado utilizando buenas prácticas."
      },
      {
        "activityDescription": "Con un ciclo for, imprime cada carácter de la palabra \"python\" en una línea separada.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Solución correcta y eficiente. El código es claro, conciso y cumple con el objetivo de la actividad."
      },
      {
        "activityDescription": "Utilizando un ciclo while, calcula el factorial de un número entero n introducido por el usuario y muestra el resultado.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Sin embargo, la variable 'multiplos' podría tener un nombre más descriptivo como 'contador'. Además, se podría agregar validación para números negativos."
      },
      {
        "activityDescription": "Con un ciclo for, imprime los números del 1 al 30 saltando de 3 en 3 (1, 4, 7, …, 28), cada número en una línea.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con la descripción de la actividad utilizando un ciclo for con el rango y el paso adecuados."
      },
      {
        "activityDescription": "Mediante un ciclo while, implementa un juego de adivinanza: el programa genera un número aleatorio del 1 al 10 y solicita al usuario que lo adivine. El proceso se repite hasta que el usuario acierte. Muestra un mensaje de felicitación al final.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La lógica del juego es correcta, pero el número aleatorio se genera en cada iteración del bucle. Debería generarse una sola vez al inicio. Considera usar nombres de variables más descriptivos."
      },
      {
        "activityDescription": "Con un ciclo for, imprime un triángulo rectángulo de 5 filas usando el carácter '*'.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y cumple con los requisitos. El código es legible y eficiente."
      },
      {
        "activityDescription": "Utilizando un ciclo while, simula un reloj digital que muestre cada segundo desde 00:00 hasta 00:59 en formato MM:SS, cada valor en una línea.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 1,
        "fileFound": true,
        "feedback": "La solución está incompleta. Falta la implementación del ciclo while y el formato de salida MM:SS. Es necesario implementar la lógica completa para simular el reloj."
      },
      {
        "activityDescription": "Con un ciclo for, solicita al usuario que ingrese un número entero positivo y calcula la suma de sus dígitos, mostrando el resultado final.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 429 . {\"error\":{\"code\":429,\"message\":\"You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.\",\"status\":\"RESOURCE_EXHAUSTED\",\"details\":[{\"@type\":\"type.googleapis.com/google.rpc.QuotaFailure\",\"violations\":[{\"quotaMetric\":\"generativelanguage.googleapis.com/generate_content_free_tier_requests\",\"quotaId\":\"GenerateRequestsPerMinutePerProjectPerModel-FreeTier\",\"quotaDimensions\":{\"location\":\"global\",\"model\":\"gemini-2.0-flash\"},\"quotaValue\":\"15\"}]},{\"@type\":\"type.googleapis.com/google.rpc.Help\",\"links\":[{\"description\":\"Learn more about Gemini API quotas\",\"url\":\"https://ai.google.dev/gemini-api/docs/rate-limits\"}]},{\"@type\":\"type.googleapis.com/google.rpc.RetryInfo\",\"retryDelay\":\"30s\"}]}}"
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra la secuencia de Fibonacci empezando por 1, 1, 2, 3, 5, … y termina cuando se alcance el primer valor mayor que 1000.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 429 . {\"error\":{\"code\":429,\"message\":\"You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.\",\"status\":\"RESOURCE_EXHAUSTED\",\"details\":[{\"@type\":\"type.googleapis.com/google.rpc.QuotaFailure\",\"violations\":[{\"quotaMetric\":\"generativelanguage.googleapis.com/generate_content_free_tier_requests\",\"quotaId\":\"GenerateRequestsPerMinutePerProjectPerModel-FreeTier\",\"quotaDimensions\":{\"location\":\"global\",\"model\":\"gemini-2.0-flash\"},\"quotaValue\":\"15\"}]},{\"@type\":\"type.googleapis.com/google.rpc.Help\",\"links\":[{\"description\":\"Learn more about Gemini API quotas\",\"url\":\"https://ai.google.dev/gemini-api/docs/rate-limits\"}]},{\"@type\":\"type.googleapis.com/google.rpc.RetryInfo\",\"retryDelay\":\"28s\"}]}}"
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas vocales (sin distinción de mayúsculas/minúsculas) hay en la frase frase = \"programacion es divertida\" y muestra el total.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 429 . {\"error\":{\"code\":429,\"message\":\"You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.\",\"status\":\"RESOURCE_EXHAUSTED\",\"details\":[{\"@type\":\"type.googleapis.com/google.rpc.QuotaFailure\",\"violations\":[{\"quotaMetric\":\"generativelanguage.googleapis.com/generate_content_free_tier_requests\",\"quotaId\":\"GenerateRequestsPerMinutePerProjectPerModel-FreeTier\",\"quotaDimensions\":{\"location\":\"global\",\"model\":\"gemini-2.0-flash\"},\"quotaValue\":\"15\"}]},{\"@type\":\"type.googleapis.com/google.rpc.Help\",\"links\":[{\"description\":\"Learn more about Gemini API quotas\",\"url\":\"https://ai.google.dev/gemini-api/docs/rate-limits\"}]},{\"@type\":\"type.googleapis.com/google.rpc.RetryInfo\",\"retryDelay\":\"27s\"}]}}"
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese edades una a una. El proceso termina cuando se introduzca -1. Al final, muestra la edad mayor que se haya ingresado.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 429 . {\"error\":{\"code\":429,\"message\":\"You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.\",\"status\":\"RESOURCE_EXHAUSTED\",\"details\":[{\"@type\":\"type.googleapis.com/google.rpc.QuotaFailure\",\"violations\":[{\"quotaMetric\":\"generativelanguage.googleapis.com/generate_content_free_tier_requests\",\"quotaId\":\"GenerateRequestsPerMinutePerProjectPerModel-FreeTier\",\"quotaDimensions\":{\"location\":\"global\",\"model\":\"gemini-2.0-flash\"},\"quotaValue\":\"15\"}]},{\"@type\":\"type.googleapis.com/google.rpc.Help\",\"links\":[{\"description\":\"Learn more about Gemini API quotas\",\"url\":\"https://ai.google.dev/gemini-api/docs/rate-limits\"}]},{\"@type\":\"type.googleapis.com/google.rpc.RetryInfo\",\"retryDelay\":\"26s\"}]}}"
      }
    ],
    "overallScore": 3.6,
    "totalActivities": 20,
    "completedActivities": 16,
    "summary": "Buen trabajo general. Completó 16/20 actividades (80%) con una calificación promedio de 3.6/5. Hay oportunidades de mejora en algunos aspectos.",
    "recommendations": [
      "Completar los archivos faltantes: src/ejercicio_17.py, src/ejercicio_18.py, src/ejercicio_19.py, src/ejercicio_20.py",
      "Revisar y mejorar las actividades con calificación baja"
    ],
    "evaluatedAt": "2025-07-26T00:38:33.992Z",
    "evaluatedBy": "Sistema de Evaluación"
  },
  "Bangel0/act_ntp_s3": {
    "repositoryUrl": "Bangel0/act_ntp_s3",
    "studentName": "Brahian Angel Ospina",
    "activities": [
      {
        "activityDescription": "Usando un ciclo for, imprime los números enteros del 0 al 9, cada uno en una línea.",
        "solutionFile": "src/ejercicio_01.py",
        "score": 4,
        "fileFound": true,
        "feedback": "El código resuelve el problema aunque empieza en 1 en vez de 0. La variable `numerosAscendentes` es descriptiva, pero el ciclo debería iniciar en 0 para cumplir con la descripción del problema."
      },
      {
        "activityDescription": "Mediante un ciclo while, imprime los números enteros del 10 al 1 en orden descendente, cada número en una línea.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 2,
        "fileFound": true,
        "feedback": "La solución imprime una lista en lugar de los números individualmente en líneas separadas.  Se podría mejorar la lógica del bucle while para imprimir cada número directamente y usar un solo entero como contador en lugar de una lista."
      },
      {
        "activityDescription": "Con un ciclo for, calcula la suma de todos los enteros del 1 al 100 (inclusive) y muestra el resultado.",
        "solutionFile": "src/ejercicio_03.py",
        "score": 3,
        "fileFound": true,
        "feedback": "La solución calcula la suma, pero tiene un error en el rango del ciclo `for`.  El ciclo itera hasta `len(suma_res)+1`, lo cual hace que `n` tome el valor 101 en la última iteración, sumando un número fuera del rango solicitado. Además, la lista `suma_res` no es necesaria, el ciclo `for` puede iterar directamente sobre el rango 1-101."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese números. El proceso termina cuando el usuario escriba 0. Al final, muestra la suma total de todos los números ingresados.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 4,
        "fileFound": true,
        "feedback": "El código resuelve el problema, pero incluye el 0 en la suma final. Podrías excluir el 0 del cálculo de la suma para una solución más precisa. Además, la función podría ser más reutilizable si devolviera la suma en lugar de imprimirla directamente."
      },
      {
        "activityDescription": "Con un ciclo for, imprime la tabla de multiplicar del 7, es decir, 7 × 1, 7 × 2, …, 7 × 10, cada resultado en una línea.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Sin embargo, usar una comprensión de lista solo para imprimir no es la forma más legible. Preferiría un bucle for explícito para mayor claridad."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra los primeros 15 múltiplos de 3, comenzando desde 3.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La lógica es correcta y genera los múltiplos de 3. Sin embargo, la condición `multiplos != 16` no es la forma más clara de expresar que quieres 15 múltiplos. Podrías considerar usar un contador o ajustar la condición del while para ser más explícito sobre el número de iteraciones."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas letras 'a' (minúscula) hay en la cadena texto = \"manzana\" y muestra el total.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 3,
        "fileFound": true,
        "feedback": "La solución resuelve el problema, pero usa nombres de variables poco descriptivos, lo que dificulta la lectura.  Se podría mejorar la legibilidad usando nombres más significativos y la función debería recibir el texto como argumento en lugar de tenerlo hardcodeado."
      },
      {
        "activityDescription": "Usando un ciclo while, calcula y muestra los cuadrados de los números del 1 al 20 (1², 2², …, 20²), cada resultado en una línea.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 3,
        "fileFound": true,
        "feedback": "La solución funciona, pero no utiliza un ciclo `while` de la manera más eficiente. Se podría simplificar el código utilizando un contador en lugar de un iterador y una lista predefinida."
      },
      {
        "activityDescription": "Con un ciclo for, imprime todos los números pares del 2 al 50 (ambos inclusive), cada número en una línea.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Se puede mejorar la legibilidad al usar un ciclo for tradicional en lugar de una lista de comprensión para imprimir los números."
      },
      {
        "activityDescription": "Mediante un ciclo while, solicita al usuario que escriba palabras. El proceso termina cuando el usuario escriba la palabra \"fin\". Al final, muestra cuántas palabras se leyeron (sin contar \"fin\").",
        "solutionFile": "src/ejercicio_10.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El uso de `.lower()` hace que el programa sea más robusto al aceptar 'Fin', 'FIN', etc."
      },
      {
        "activityDescription": "Con un ciclo for, imprime cada carácter de la palabra \"python\" en una línea separada.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Cumple con el objetivo de la actividad utilizando un ciclo for de manera eficiente para imprimir cada carácter de la palabra 'python' en una línea separada."
      },
      {
        "activityDescription": "Utilizando un ciclo while, calcula el factorial de un número entero n introducido por el usuario y muestra el resultado.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. El código es limpio, legible y cumple con los requisitos del problema utilizando un ciclo while para calcular el factorial."
      },
      {
        "activityDescription": "Con un ciclo for, imprime los números del 1 al 30 saltando de 3 en 3 (1, 4, 7, …, 28), cada número en una línea.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y cumple con todos los requisitos. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Mediante un ciclo while, implementa un juego de adivinanza: el programa genera un número aleatorio del 1 al 10 y solicita al usuario que lo adivine. El proceso se repite hasta que el usuario acierte. Muestra un mensaje de felicitación al final.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es funcional, claro y conciso, resolviendo el problema planteado de manera eficiente. Bien hecho."
      },
      {
        "activityDescription": "Con un ciclo for, imprime un triángulo rectángulo de 5 filas usando el carácter '*'.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Utiliza un ciclo for de forma eficiente para generar el triángulo rectángulo."
      },
      {
        "activityDescription": "Utilizando un ciclo while, simula un reloj digital que muestre cada segundo desde 00:00 hasta 00:59 en formato MM:SS, cada valor en una línea.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, funcional y utiliza el formateo correcto para la presentación de la hora. Cumple a la perfección con los requisitos del ejercicio."
      },
      {
        "activityDescription": "Con un ciclo for, solicita al usuario que ingrese un número entero positivo y calcula la suma de sus dígitos, mostrando el resultado final.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, eficiente y fácil de entender. El código maneja adecuadamente la validación de la entrada del usuario."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra la secuencia de Fibonacci empezando por 1, 1, 2, 3, 5, … y termina cuando se alcance el primer valor mayor que 1000.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 429 . {\"error\":{\"code\":429,\"message\":\"You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.\",\"status\":\"RESOURCE_EXHAUSTED\",\"details\":[{\"@type\":\"type.googleapis.com/google.rpc.QuotaFailure\",\"violations\":[{\"quotaMetric\":\"generativelanguage.googleapis.com/generate_content_free_tier_requests\",\"quotaId\":\"GenerateRequestsPerMinutePerProjectPerModel-FreeTier\",\"quotaDimensions\":{\"location\":\"global\",\"model\":\"gemini-2.0-flash\"},\"quotaValue\":\"15\"}]},{\"@type\":\"type.googleapis.com/google.rpc.Help\",\"links\":[{\"description\":\"Learn more about Gemini API quotas\",\"url\":\"https://ai.google.dev/gemini-api/docs/rate-limits\"}]},{\"@type\":\"type.googleapis.com/google.rpc.RetryInfo\",\"retryDelay\":\"7s\"}]}}"
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas vocales (sin distinción de mayúsculas/minúsculas) hay en la frase frase = \"programacion es divertida\" y muestra el total.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 429 . {\"error\":{\"code\":429,\"message\":\"You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.\",\"status\":\"RESOURCE_EXHAUSTED\",\"details\":[{\"@type\":\"type.googleapis.com/google.rpc.QuotaFailure\",\"violations\":[{\"quotaMetric\":\"generativelanguage.googleapis.com/generate_content_free_tier_requests\",\"quotaId\":\"GenerateRequestsPerMinutePerProjectPerModel-FreeTier\",\"quotaDimensions\":{\"model\":\"gemini-2.0-flash\",\"location\":\"global\"},\"quotaValue\":\"15\"}]},{\"@type\":\"type.googleapis.com/google.rpc.Help\",\"links\":[{\"description\":\"Learn more about Gemini API quotas\",\"url\":\"https://ai.google.dev/gemini-api/docs/rate-limits\"}]},{\"@type\":\"type.googleapis.com/google.rpc.RetryInfo\",\"retryDelay\":\"6s\"}]}}"
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese edades una a una. El proceso termina cuando se introduzca -1. Al final, muestra la edad mayor que se haya ingresado.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 429 . {\"error\":{\"code\":429,\"message\":\"You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.\",\"status\":\"RESOURCE_EXHAUSTED\",\"details\":[{\"@type\":\"type.googleapis.com/google.rpc.QuotaFailure\",\"violations\":[{\"quotaMetric\":\"generativelanguage.googleapis.com/generate_content_free_tier_requests\",\"quotaId\":\"GenerateRequestsPerMinutePerProjectPerModel-FreeTier\",\"quotaDimensions\":{\"location\":\"global\",\"model\":\"gemini-2.0-flash\"},\"quotaValue\":\"15\"}]},{\"@type\":\"type.googleapis.com/google.rpc.Help\",\"links\":[{\"description\":\"Learn more about Gemini API quotas\",\"url\":\"https://ai.google.dev/gemini-api/docs/rate-limits\"}]},{\"@type\":\"type.googleapis.com/google.rpc.RetryInfo\",\"retryDelay\":\"4s\"}]}}"
      }
    ],
    "overallScore": 4.176470588235294,
    "totalActivities": 20,
    "completedActivities": 17,
    "summary": "Excelente trabajo. Completó 17/20 actividades (85%) con una calificación promedio de 4.2/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Completar los archivos faltantes: src/ejercicio_18.py, src/ejercicio_19.py, src/ejercicio_20.py",
      "Revisar y mejorar las actividades con calificación baja"
    ],
    "evaluatedAt": "2025-07-26T01:02:31.102Z",
    "evaluatedBy": "Sistema"
  },
  "Luisfercit/act_ntp_s3": {
    "repositoryUrl": "Luisfercit/act_ntp_s3",
    "studentName": "Luis Fernando  Miranda Rivas",
    "activities": [
      {
        "activityDescription": "Usando un ciclo for, imprime los números enteros del 0 al 9, cada uno en una línea.",
        "solutionFile": "src/ejercicio_01.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y cumple con la descripción del problema. El código es conciso y fácil de entender. ¡Bien hecho!"
      },
      {
        "activityDescription": "Mediante un ciclo while, imprime los números enteros del 10 al 1 en orden descendente, cada número en una línea.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es casi correcta. El ciclo `while` incluye el 0, lo cual no se pedía. Se puede mejorar ajustando la condición a `contador > 0`."
      },
      {
        "activityDescription": "Con un ciclo for, calcula la suma de todos los enteros del 1 al 100 (inclusive) y muestra el resultado.",
        "solutionFile": "src/ejercicio_03.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y fácil de entender, cumpliendo con todos los requisitos de la actividad."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese números. El proceso termina cuando el usuario escriba 0. Al final, muestra la suma total de todos los números ingresados.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y funcional. Utiliza un ciclo `while` y la conversión a entero es adecuada. Buen trabajo."
      },
      {
        "activityDescription": "Con un ciclo for, imprime la tabla de multiplicar del 7, es decir, 7 × 1, 7 × 2, …, 7 × 10, cada resultado en una línea.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y eficiente. El código es legible y cumple con el objetivo propuesto."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra los primeros 15 múltiplos de 3, comenzando desde 3.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con el objetivo de generar los primeros 15 múltiplos de 3 utilizando un ciclo while."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas letras 'a' (minúscula) hay en la cadena texto = \"manzana\" y muestra el total.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. El código es legible y cumple con el objetivo de la actividad."
      },
      {
        "activityDescription": "Usando un ciclo while, calcula y muestra los cuadrados de los números del 1 al 20 (1², 2², …, 20²), cada resultado en una línea.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con los requisitos del ejercicio."
      },
      {
        "activityDescription": "Con un ciclo for, imprime todos los números pares del 2 al 50 (ambos inclusive), cada número en una línea.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, eficiente y legible. Utiliza adecuadamente el ciclo for con un paso de 2 para imprimir los números pares en el rango especificado. ¡Excelente trabajo!"
      },
      {
        "activityDescription": "Mediante un ciclo while, solicita al usuario que escriba palabras. El proceso termina cuando el usuario escriba la palabra \"fin\". Al final, muestra cuántas palabras se leyeron (sin contar \"fin\").",
        "solutionFile": "src/ejercicio_10.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. El código cumple con todos los requisitos de la actividad y utiliza buenas prácticas como `.strip()` y `.lower()` para robustecer la entrada del usuario."
      },
      {
        "activityDescription": "Con un ciclo for, imprime cada carácter de la palabra \"python\" en una línea separada.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código es limpio y cumple con el objetivo planteado. ¡Excelente trabajo!"
      },
      {
        "activityDescription": "Utilizando un ciclo while, calcula el factorial de un número entero n introducido por el usuario y muestra el resultado.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con el objetivo de calcular el factorial usando un ciclo while."
      },
      {
        "activityDescription": "Con un ciclo for, imprime los números del 1 al 30 saltando de 3 en 3 (1, 4, 7, …, 28), cada número en una línea.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es claro y cumple con los requisitos de la actividad."
      },
      {
        "activityDescription": "Mediante un ciclo while, implementa un juego de adivinanza: el programa genera un número aleatorio del 1 al 10 y solicita al usuario que lo adivine. El proceso se repite hasta que el usuario acierte. Muestra un mensaje de felicitación al final.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y cumple con todos los requisitos. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Con un ciclo for, imprime un triángulo rectángulo de 5 filas usando el carácter '*'.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código resuelve el problema de manera concisa y eficiente, utilizando un ciclo for para imprimir el triángulo rectángulo correctamente."
      },
      {
        "activityDescription": "Utilizando un ciclo while, simula un reloj digital que muestre cada segundo desde 00:00 hasta 00:59 en formato MM:SS, cada valor en una línea.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 5,
        "fileFound": true,
        "feedback": "¡Excelente solución! El código es conciso, funcional y cumple con todos los requisitos del problema. Se utiliza correctamente el ciclo while y el formateo de cadenas para la presentación."
      },
      {
        "activityDescription": "Con un ciclo for, solicita al usuario que ingrese un número entero positivo y calcula la suma de sus dígitos, mostrando el resultado final.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 429 . {\"error\":{\"code\":429,\"message\":\"You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.\",\"status\":\"RESOURCE_EXHAUSTED\",\"details\":[{\"@type\":\"type.googleapis.com/google.rpc.QuotaFailure\",\"violations\":[{\"quotaMetric\":\"generativelanguage.googleapis.com/generate_content_free_tier_requests\",\"quotaId\":\"GenerateRequestsPerMinutePerProjectPerModel-FreeTier\",\"quotaDimensions\":{\"location\":\"global\",\"model\":\"gemini-2.0-flash\"},\"quotaValue\":\"15\"}]},{\"@type\":\"type.googleapis.com/google.rpc.Help\",\"links\":[{\"description\":\"Learn more about Gemini API quotas\",\"url\":\"https://ai.google.dev/gemini-api/docs/rate-limits\"}]},{\"@type\":\"type.googleapis.com/google.rpc.RetryInfo\",\"retryDelay\":\"17s\"}]}}"
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra la secuencia de Fibonacci empezando por 1, 1, 2, 3, 5, … y termina cuando se alcance el primer valor mayor que 1000.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código es limpio y fácil de entender, cumpliendo con los requisitos de la actividad."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas vocales (sin distinción de mayúsculas/minúsculas) hay en la frase frase = \"programacion es divertida\" y muestra el total.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 429 . {\"error\":{\"code\":429,\"message\":\"You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.\",\"status\":\"RESOURCE_EXHAUSTED\",\"details\":[{\"@type\":\"type.googleapis.com/google.rpc.QuotaFailure\",\"violations\":[{\"quotaMetric\":\"generativelanguage.googleapis.com/generate_content_free_tier_requests\",\"quotaId\":\"GenerateRequestsPerMinutePerProjectPerModel-FreeTier\",\"quotaDimensions\":{\"location\":\"global\",\"model\":\"gemini-2.0-flash\"},\"quotaValue\":\"15\"}]},{\"@type\":\"type.googleapis.com/google.rpc.Help\",\"links\":[{\"description\":\"Learn more about Gemini API quotas\",\"url\":\"https://ai.google.dev/gemini-api/docs/rate-limits\"}]},{\"@type\":\"type.googleapis.com/google.rpc.RetryInfo\",\"retryDelay\":\"14s\"}]}}"
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese edades una a una. El proceso termina cuando se introduzca -1. Al final, muestra la edad mayor que se haya ingresado.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 429 . {\"error\":{\"code\":429,\"message\":\"You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.\",\"status\":\"RESOURCE_EXHAUSTED\",\"details\":[{\"@type\":\"type.googleapis.com/google.rpc.QuotaFailure\",\"violations\":[{\"quotaMetric\":\"generativelanguage.googleapis.com/generate_content_free_tier_requests\",\"quotaId\":\"GenerateRequestsPerMinutePerProjectPerModel-FreeTier\",\"quotaDimensions\":{\"location\":\"global\",\"model\":\"gemini-2.0-flash\"},\"quotaValue\":\"15\"}]},{\"@type\":\"type.googleapis.com/google.rpc.Help\",\"links\":[{\"description\":\"Learn more about Gemini API quotas\",\"url\":\"https://ai.google.dev/gemini-api/docs/rate-limits\"}]},{\"@type\":\"type.googleapis.com/google.rpc.RetryInfo\",\"retryDelay\":\"11s\"}]}}"
      }
    ],
    "overallScore": 4.2,
    "totalActivities": 20,
    "completedActivities": 17,
    "summary": "Excelente trabajo. Completó 17/20 actividades (85%) con una calificación promedio de 4.2/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Completar los archivos faltantes: src/ejercicio_17.py, src/ejercicio_19.py, src/ejercicio_20.py"
    ],
    "evaluatedAt": "2025-07-26T01:34:48.617Z",
    "evaluatedBy": "Sistema de Evaluación"
  },
  "Santiago-cm-program/act_ntp_s3": {
    "repositoryUrl": "Santiago-cm-program/act_ntp_s3",
    "studentName": "Santiago Correa Mejia",
    "activities": [
      {
        "activityDescription": "Usando un ciclo for, imprime los números enteros del 0 al 9, cada uno en una línea.",
        "solutionFile": "src/ejercicio_01.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y cumple con los requisitos. El código es legible y funcional. ¡Buen trabajo!"
      },
      {
        "activityDescription": "Mediante un ciclo while, imprime los números enteros del 10 al 1 en orden descendente, cada número en una línea.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Solución correcta y eficiente. El código es claro, conciso y cumple con el objetivo de la actividad."
      },
      {
        "activityDescription": "Con un ciclo for, calcula la suma de todos los enteros del 1 al 100 (inclusive) y muestra el resultado.",
        "solutionFile": "src/ejercicio_03.py",
        "score": 5,
        "fileFound": true,
        "feedback": "El código resuelve correctamente la actividad planteada y es conciso. Bien hecho."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese números. El proceso termina cuando el usuario escriba 0. Al final, muestra la suma total de todos los números ingresados.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Considera usar un bloque `try-except` para manejar errores si el usuario ingresa un valor no numérico. Podrías agregar comentarios para mejorar la legibilidad."
      },
      {
        "activityDescription": "Con un ciclo for, imprime la tabla de multiplicar del 7, es decir, 7 × 1, 7 × 2, …, 7 × 10, cada resultado en una línea.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con el objetivo de la actividad."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra los primeros 15 múltiplos de 3, comenzando desde 3.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, funcional y cumple con los requisitos de la actividad. Bien hecho."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas letras 'a' (minúscula) hay en la cadena texto = \"manzana\" y muestra el total.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Solución correcta y concisa. El código es legible y cumple con el objetivo del ejercicio."
      },
      {
        "activityDescription": "Usando un ciclo while, calcula y muestra los cuadrados de los números del 1 al 20 (1², 2², …, 20²), cada resultado en una línea.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funciona. Sin embargo, no es necesario importar la librería `math` para calcular el cuadrado de un número; `number = count**2` es una alternativa más simple y legible. Considera usar nombres de variables más descriptivos para mejorar la claridad."
      },
      {
        "activityDescription": "Con un ciclo for, imprime todos los números pares del 2 al 50 (ambos inclusive), cada número en una línea.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código es legible y cumple con la descripción de la actividad."
      },
      {
        "activityDescription": "Mediante un ciclo while, solicita al usuario que escriba palabras. El proceso termina cuando el usuario escriba la palabra \"fin\". Al final, muestra cuántas palabras se leyeron (sin contar \"fin\").",
        "solutionFile": "src/ejercicio_10.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, fácil de entender y cumple con todos los requisitos del problema. Se usa el ciclo `while` correctamente y la lógica para terminar el ciclo y contar las palabras es correcta."
      },
      {
        "activityDescription": "Con un ciclo for, imprime cada carácter de la palabra \"python\" en una línea separada.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y eficiente. El código cumple con los requisitos y las buenas prácticas básicas."
      },
      {
        "activityDescription": "Utilizando un ciclo while, calcula el factorial de un número entero n introducido por el usuario y muestra el resultado.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código es legible y cumple con el objetivo de calcular el factorial utilizando un ciclo while. No se observan áreas de mejora significativas."
      },
      {
        "activityDescription": "Con un ciclo for, imprime los números del 1 al 30 saltando de 3 en 3 (1, 4, 7, …, 28), cada número en una línea.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, funcional y resuelve el problema planteado de manera correcta."
      },
      {
        "activityDescription": "Mediante un ciclo while, implementa un juego de adivinanza: el programa genera un número aleatorio del 1 al 10 y solicita al usuario que lo adivine. El proceso se repite hasta que el usuario acierte. Muestra un mensaje de felicitación al final.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La lógica del juego es correcta y funciona. Sin embargo, se imprime el número aleatorio generado en cada iteración, lo cual no es deseable en un juego de adivinanzas. Sería bueno añadir mensajes de pista (mayor/menor) para guiar al usuario."
      },
      {
        "activityDescription": "Con un ciclo for, imprime un triángulo rectángulo de 5 filas usando el carácter '*'.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código es legible y cumple con el objetivo de la actividad utilizando un ciclo for de manera eficiente."
      },
      {
        "activityDescription": "Utilizando un ciclo while, simula un reloj digital que muestre cada segundo desde 00:00 hasta 00:59 en formato MM:SS, cada valor en una línea.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 3,
        "fileFound": true,
        "feedback": "La lógica del bucle es correcta pero el reloj inicia en 00:01 en lugar de 00:00. Falta un `print` inicial para mostrar el 00:00 y considera incluir la condición de parada del bucle directamente en el `while`."
      },
      {
        "activityDescription": "Con un ciclo for, solicita al usuario que ingrese un número entero positivo y calcula la suma de sus dígitos, mostrando el resultado final.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 5,
        "fileFound": true,
        "feedback": "¡Excelente solución! El código es conciso, legible y resuelve el problema correctamente. La validación de entrada es un buen toque."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra la secuencia de Fibonacci empezando por 1, 1, 2, 3, 5, … y termina cuando se alcance el primer valor mayor que 1000.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 3,
        "fileFound": true,
        "feedback": "La lógica de Fibonacci es correcta, pero el tope del ciclo es incorrecto (1597 en vez de 1000). Se recomienda usar un tope dinámico o calcular la secuencia hasta que el valor sea mayor a 1000."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas vocales (sin distinción de mayúsculas/minúsculas) hay en la frase frase = \"programacion es divertida\" y muestra el total.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y eficiente. El uso de `word.lower()` y la comparación directa con `letter in (\"a\",\"e\",\"i\",\"o\",\"u\")` es una buena práctica."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese edades una a una. El proceso termina cuando se introduzca -1. Al final, muestra la edad mayor que se haya ingresado.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código es legible y cumple con los requerimientos de la actividad. Buen trabajo."
      }
    ],
    "overallScore": 4.65,
    "totalActivities": 20,
    "completedActivities": 20,
    "summary": "Excelente trabajo. Completó 20/20 actividades (100%) con una calificación promedio de 4.7/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Continuar con el excelente trabajo y mantener la calidad del código"
    ],
    "evaluatedAt": "2025-07-26T01:41:41.747Z",
    "evaluatedBy": "Sistema de Evaluación"
  },
  "samuprogramador333/act_ntp_s3": {
    "repositoryUrl": "samuprogramador333/act_ntp_s3",
    "studentName": "Samuel Bernal Soto",
    "activities": [
      {
        "activityDescription": "Usando un ciclo for, imprime los números enteros del 0 al 9, cada uno en una línea.",
        "solutionFile": "src/ejercicio_01.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y cumple con todos los requisitos. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Mediante un ciclo while, imprime los números enteros del 10 al 1 en orden descendente, cada número en una línea.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, funcional y cumple con los requerimientos. El código es legible y eficiente."
      },
      {
        "activityDescription": "Con un ciclo for, calcula la suma de todos los enteros del 1 al 100 (inclusive) y muestra el resultado.",
        "solutionFile": "src/ejercicio_03.py",
        "score": 3,
        "fileFound": true,
        "feedback": "La solución calcula la suma correctamente, pero imprime la suma parcial en cada iteración en lugar de la suma total al final.  Sería mejor mover el `print(suma)` fuera del bucle `for`."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese números. El proceso termina cuando el usuario escriba 0. Al final, muestra la suma total de todos los números ingresados.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y bien estructurada. El código es legible y cumple con la descripción de la actividad."
      },
      {
        "activityDescription": "Con un ciclo for, imprime la tabla de multiplicar del 7, es decir, 7 × 1, 7 × 2, …, 7 × 10, cada resultado en una línea.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con los requisitos de la actividad. ¡Excelente trabajo!"
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra los primeros 15 múltiplos de 3, comenzando desde 3.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es claro, fácil de entender y cumple con los requisitos de la actividad."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas letras 'a' (minúscula) hay en la cadena texto = \"manzana\" y muestra el total.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 3,
        "fileFound": true,
        "feedback": "La solución funciona pero es sensible a mayúsculas.  Considera usar `lower()` para hacer el conteo sin importar si la 'a' es mayúscula o minúscula. También, el nombre de la variable 'palabra' tiene un error ortográfico."
      },
      {
        "activityDescription": "Usando un ciclo while, calcula y muestra los cuadrados de los números del 1 al 20 (1², 2², …, 20²), cada resultado en una línea.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y eficiente. El código es fácil de leer y cumple con los requisitos de la actividad."
      },
      {
        "activityDescription": "Con un ciclo for, imprime todos los números pares del 2 al 50 (ambos inclusive), cada número en una línea.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 5,
        "fileFound": true,
        "feedback": "¡Excelente solución! El código es conciso, legible y cumple perfectamente con los requisitos de la actividad.  Buen uso del 'step' en la función range."
      },
      {
        "activityDescription": "Mediante un ciclo while, solicita al usuario que escriba palabras. El proceso termina cuando el usuario escriba la palabra \"fin\". Al final, muestra cuántas palabras se leyeron (sin contar \"fin\").",
        "solutionFile": "src/ejercicio_10.py",
        "score": 5,
        "fileFound": true,
        "feedback": "El código resuelve correctamente el problema planteado y es fácil de entender. Se recomienda usar nombres de variables más descriptivos para mejorar la legibilidad, por ejemplo, `contador_palabras` en lugar de `sumar_palabras`."
      },
      {
        "activityDescription": "Con un ciclo for, imprime cada carácter de la palabra \"python\" en una línea separada.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y cumple con los requisitos de la actividad. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Utilizando un ciclo while, calcula el factorial de un número entero n introducido por el usuario y muestra el resultado.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 3,
        "fileFound": true,
        "feedback": "El código calcula correctamente el factorial, pero imprime el resultado en cada iteración del bucle, no solo al final. Deberías mover el `print` fuera del `while` para mostrar el resultado final una sola vez."
      },
      {
        "activityDescription": "Con un ciclo for, imprime los números del 1 al 30 saltando de 3 en 3 (1, 4, 7, …, 28), cada número en una línea.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, funcional y resuelve correctamente el problema planteado. La elección del nombre de la variable es descriptiva."
      },
      {
        "activityDescription": "Mediante un ciclo while, implementa un juego de adivinanza: el programa genera un número aleatorio del 1 al 10 y solicita al usuario que lo adivine. El proceso se repite hasta que el usuario acierte. Muestra un mensaje de felicitación al final.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Con un ciclo for, imprime un triángulo rectángulo de 5 filas usando el carácter '*'.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "¡Excelente solución! El código es conciso, legible y resuelve el problema planteado de manera eficiente. Bien hecho."
      },
      {
        "activityDescription": "Utilizando un ciclo while, simula un reloj digital que muestre cada segundo desde 00:00 hasta 00:59 en formato MM:SS, cada valor en una línea.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Con un ciclo for, solicita al usuario que ingrese un número entero positivo y calcula la suma de sus dígitos, mostrando el resultado final.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra la secuencia de Fibonacci empezando por 1, 1, 2, 3, 5, … y termina cuando se alcance el primer valor mayor que 1000.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas vocales (sin distinción de mayúsculas/minúsculas) hay en la frase frase = \"programacion es divertida\" y muestra el total.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese edades una a una. El proceso termina cuando se introduzca -1. Al final, muestra la edad mayor que se haya ingresado.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      }
    ],
    "overallScore": 3.2,
    "totalActivities": 20,
    "completedActivities": 14,
    "summary": "Buen trabajo general. Completó 14/20 actividades (70%) con una calificación promedio de 3.2/5. Hay oportunidades de mejora en algunos aspectos.",
    "recommendations": [
      "Revisar y mejorar las actividades con calificación baja"
    ],
    "evaluatedAt": "2025-07-26T16:42:48.517Z",
    "evaluatedBy": "Sistema de Evaluación"
  },
  "jfinfotest/act_ntp_s3": {
    "repositoryUrl": "jfinfotest/act_ntp_s3",
    "studentName": "Jhon Valencia",
    "activities": [
      {
        "activityDescription": "Usando un ciclo for, imprime los números enteros del 0 al 9, cada uno en una línea.",
        "solutionFile": "src/ejercicio_01.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Contenido insuficiente - solo comentarios o código trivial"
      },
      {
        "activityDescription": "Mediante un ciclo while, imprime los números enteros del 10 al 1 en orden descendente, cada número en una línea.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Con un ciclo for, calcula la suma de todos los enteros del 1 al 100 (inclusive) y muestra el resultado.",
        "solutionFile": "src/ejercicio_03.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese números. El proceso termina cuando el usuario escriba 0. Al final, muestra la suma total de todos los números ingresados.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Con un ciclo for, imprime la tabla de multiplicar del 7, es decir, 7 × 1, 7 × 2, …, 7 × 10, cada resultado en una línea.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra los primeros 15 múltiplos de 3, comenzando desde 3.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas letras 'a' (minúscula) hay en la cadena texto = \"manzana\" y muestra el total.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Usando un ciclo while, calcula y muestra los cuadrados de los números del 1 al 20 (1², 2², …, 20²), cada resultado en una línea.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Con un ciclo for, imprime todos los números pares del 2 al 50 (ambos inclusive), cada número en una línea.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Mediante un ciclo while, solicita al usuario que escriba palabras. El proceso termina cuando el usuario escriba la palabra \"fin\". Al final, muestra cuántas palabras se leyeron (sin contar \"fin\").",
        "solutionFile": "src/ejercicio_10.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Con un ciclo for, imprime cada carácter de la palabra \"python\" en una línea separada.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Utilizando un ciclo while, calcula el factorial de un número entero n introducido por el usuario y muestra el resultado.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Con un ciclo for, imprime los números del 1 al 30 saltando de 3 en 3 (1, 4, 7, …, 28), cada número en una línea.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Mediante un ciclo while, implementa un juego de adivinanza: el programa genera un número aleatorio del 1 al 10 y solicita al usuario que lo adivine. El proceso se repite hasta que el usuario acierte. Muestra un mensaje de felicitación al final.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Con un ciclo for, imprime un triángulo rectángulo de 5 filas usando el carácter '*'.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Utilizando un ciclo while, simula un reloj digital que muestre cada segundo desde 00:00 hasta 00:59 en formato MM:SS, cada valor en una línea.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Con un ciclo for, solicita al usuario que ingrese un número entero positivo y calcula la suma de sus dígitos, mostrando el resultado final.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra la secuencia de Fibonacci empezando por 1, 1, 2, 3, 5, … y termina cuando se alcance el primer valor mayor que 1000.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas vocales (sin distinción de mayúsculas/minúsculas) hay en la frase frase = \"programacion es divertida\" y muestra el total.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese edades una a una. El proceso termina cuando se introduzca -1. Al final, muestra la edad mayor que se haya ingresado.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      }
    ],
    "overallScore": 0,
    "totalActivities": 20,
    "completedActivities": 0,
    "summary": "Necesita mejorar. Completó 0/20 actividades (0%) con una calificación promedio de 0.0/5. Se recomienda revisar los conceptos fundamentales.",
    "recommendations": [
      "Revisar y mejorar las actividades con calificación baja",
      "Enfocarse en mejorar la documentación y comentarios del código",
      "Aplicar mejores prácticas de programación"
    ],
    "evaluatedAt": "2025-08-21T17:19:24.204Z",
    "evaluatedBy": "Sistema de Evaluación"
  },
  "AndresVallejo1/act_ntp_s3": {
    "repositoryUrl": "AndresVallejo1/act_ntp_s3",
    "studentName": "Estudiante desconocido",
    "activities": [
      {
        "activityDescription": "Usando un ciclo for, imprime los números enteros del 0 al 9, cada uno en una línea.",
        "solutionFile": "src/ejercicio_01.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 429 . {\"error\":{\"code\":429,\"message\":\"You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.\",\"status\":\"RESOURCE_EXHAUSTED\",\"details\":[{\"@type\":\"type.googleapis.com/google.rpc.QuotaFailure\",\"violations\":[{\"quotaMetric\":\"generativelanguage.googleapis.com/generate_content_free_tier_requests\",\"quotaId\":\"GenerateRequestsPerDayPerProjectPerModel-FreeTier\",\"quotaDimensions\":{\"location\":\"global\",\"model\":\"gemini-2.0-flash\"},\"quotaValue\":\"200\"}]},{\"@type\":\"type.googleapis.com/google.rpc.Help\",\"links\":[{\"description\":\"Learn more about Gemini API quotas\",\"url\":\"https://ai.google.dev/gemini-api/docs/rate-limits\"}]},{\"@type\":\"type.googleapis.com/google.rpc.RetryInfo\",\"retryDelay\":\"35s\"}]}}"
      },
      {
        "activityDescription": "Mediante un ciclo while, imprime los números enteros del 10 al 1 en orden descendente, cada número en una línea.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 429 . {\"error\":{\"code\":429,\"message\":\"You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.\",\"status\":\"RESOURCE_EXHAUSTED\",\"details\":[{\"@type\":\"type.googleapis.com/google.rpc.QuotaFailure\",\"violations\":[{\"quotaMetric\":\"generativelanguage.googleapis.com/generate_content_free_tier_requests\",\"quotaId\":\"GenerateRequestsPerDayPerProjectPerModel-FreeTier\",\"quotaDimensions\":{\"model\":\"gemini-2.0-flash\",\"location\":\"global\"},\"quotaValue\":\"200\"}]},{\"@type\":\"type.googleapis.com/google.rpc.Help\",\"links\":[{\"description\":\"Learn more about Gemini API quotas\",\"url\":\"https://ai.google.dev/gemini-api/docs/rate-limits\"}]},{\"@type\":\"type.googleapis.com/google.rpc.RetryInfo\",\"retryDelay\":\"34s\"}]}}"
      },
      {
        "activityDescription": "Con un ciclo for, calcula la suma de todos los enteros del 1 al 100 (inclusive) y muestra el resultado.",
        "solutionFile": "src/ejercicio_03.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 429 . {\"error\":{\"code\":429,\"message\":\"You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.\",\"status\":\"RESOURCE_EXHAUSTED\",\"details\":[{\"@type\":\"type.googleapis.com/google.rpc.QuotaFailure\",\"violations\":[{\"quotaMetric\":\"generativelanguage.googleapis.com/generate_content_free_tier_requests\",\"quotaId\":\"GenerateRequestsPerDayPerProjectPerModel-FreeTier\",\"quotaDimensions\":{\"location\":\"global\",\"model\":\"gemini-2.0-flash\"},\"quotaValue\":\"200\"}]},{\"@type\":\"type.googleapis.com/google.rpc.Help\",\"links\":[{\"description\":\"Learn more about Gemini API quotas\",\"url\":\"https://ai.google.dev/gemini-api/docs/rate-limits\"}]},{\"@type\":\"type.googleapis.com/google.rpc.RetryInfo\",\"retryDelay\":\"33s\"}]}}"
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese números. El proceso termina cuando el usuario escriba 0. Al final, muestra la suma total de todos los números ingresados.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 429 . {\"error\":{\"code\":429,\"message\":\"You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.\",\"status\":\"RESOURCE_EXHAUSTED\",\"details\":[{\"@type\":\"type.googleapis.com/google.rpc.QuotaFailure\",\"violations\":[{\"quotaMetric\":\"generativelanguage.googleapis.com/generate_content_free_tier_requests\",\"quotaId\":\"GenerateRequestsPerDayPerProjectPerModel-FreeTier\",\"quotaDimensions\":{\"location\":\"global\",\"model\":\"gemini-2.0-flash\"},\"quotaValue\":\"200\"}]},{\"@type\":\"type.googleapis.com/google.rpc.Help\",\"links\":[{\"description\":\"Learn more about Gemini API quotas\",\"url\":\"https://ai.google.dev/gemini-api/docs/rate-limits\"}]},{\"@type\":\"type.googleapis.com/google.rpc.RetryInfo\",\"retryDelay\":\"32s\"}]}}"
      },
      {
        "activityDescription": "Con un ciclo for, imprime la tabla de multiplicar del 7, es decir, 7 × 1, 7 × 2, …, 7 × 10, cada resultado en una línea.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 429 . {\"error\":{\"code\":429,\"message\":\"You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.\",\"status\":\"RESOURCE_EXHAUSTED\",\"details\":[{\"@type\":\"type.googleapis.com/google.rpc.QuotaFailure\",\"violations\":[{\"quotaMetric\":\"generativelanguage.googleapis.com/generate_content_free_tier_requests\",\"quotaId\":\"GenerateRequestsPerDayPerProjectPerModel-FreeTier\",\"quotaDimensions\":{\"location\":\"global\",\"model\":\"gemini-2.0-flash\"},\"quotaValue\":\"200\"}]},{\"@type\":\"type.googleapis.com/google.rpc.Help\",\"links\":[{\"description\":\"Learn more about Gemini API quotas\",\"url\":\"https://ai.google.dev/gemini-api/docs/rate-limits\"}]},{\"@type\":\"type.googleapis.com/google.rpc.RetryInfo\",\"retryDelay\":\"31s\"}]}}"
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra los primeros 15 múltiplos de 3, comenzando desde 3.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 429 . {\"error\":{\"code\":429,\"message\":\"You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.\",\"status\":\"RESOURCE_EXHAUSTED\",\"details\":[{\"@type\":\"type.googleapis.com/google.rpc.QuotaFailure\",\"violations\":[{\"quotaMetric\":\"generativelanguage.googleapis.com/generate_content_free_tier_requests\",\"quotaId\":\"GenerateRequestsPerDayPerProjectPerModel-FreeTier\",\"quotaDimensions\":{\"model\":\"gemini-2.0-flash\",\"location\":\"global\"},\"quotaValue\":\"200\"}]},{\"@type\":\"type.googleapis.com/google.rpc.Help\",\"links\":[{\"description\":\"Learn more about Gemini API quotas\",\"url\":\"https://ai.google.dev/gemini-api/docs/rate-limits\"}]},{\"@type\":\"type.googleapis.com/google.rpc.RetryInfo\",\"retryDelay\":\"30s\"}]}}"
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas letras 'a' (minúscula) hay en la cadena texto = \"manzana\" y muestra el total.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 429 . {\"error\":{\"code\":429,\"message\":\"You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.\",\"status\":\"RESOURCE_EXHAUSTED\",\"details\":[{\"@type\":\"type.googleapis.com/google.rpc.QuotaFailure\",\"violations\":[{\"quotaMetric\":\"generativelanguage.googleapis.com/generate_content_free_tier_requests\",\"quotaId\":\"GenerateRequestsPerDayPerProjectPerModel-FreeTier\",\"quotaDimensions\":{\"location\":\"global\",\"model\":\"gemini-2.0-flash\"},\"quotaValue\":\"200\"}]},{\"@type\":\"type.googleapis.com/google.rpc.Help\",\"links\":[{\"description\":\"Learn more about Gemini API quotas\",\"url\":\"https://ai.google.dev/gemini-api/docs/rate-limits\"}]},{\"@type\":\"type.googleapis.com/google.rpc.RetryInfo\",\"retryDelay\":\"29s\"}]}}"
      },
      {
        "activityDescription": "Usando un ciclo while, calcula y muestra los cuadrados de los números del 1 al 20 (1², 2², …, 20²), cada resultado en una línea.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 429 . {\"error\":{\"code\":429,\"message\":\"You exceeded your current quota, please check your plan and billing details. For more information on this error, head to: https://ai.google.dev/gemini-api/docs/rate-limits.\",\"status\":\"RESOURCE_EXHAUSTED\",\"details\":[{\"@type\":\"type.googleapis.com/google.rpc.QuotaFailure\",\"violations\":[{\"quotaMetric\":\"generativelanguage.googleapis.com/generate_content_free_tier_requests\",\"quotaId\":\"GenerateRequestsPerDayPerProjectPerModel-FreeTier\",\"quotaDimensions\":{\"location\":\"global\",\"model\":\"gemini-2.0-flash\"},\"quotaValue\":\"200\"}]},{\"@type\":\"type.googleapis.com/google.rpc.Help\",\"links\":[{\"description\":\"Learn more about Gemini API quotas\",\"url\":\"https://ai.google.dev/gemini-api/docs/rate-limits\"}]},{\"@type\":\"type.googleapis.com/google.rpc.RetryInfo\",\"retryDelay\":\"28s\"}]}}"
      },
      {
        "activityDescription": "Con un ciclo for, imprime todos los números pares del 2 al 50 (ambos inclusive), cada número en una línea.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Mediante un ciclo while, solicita al usuario que escriba palabras. El proceso termina cuando el usuario escriba la palabra \"fin\". Al final, muestra cuántas palabras se leyeron (sin contar \"fin\").",
        "solutionFile": "src/ejercicio_10.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Con un ciclo for, imprime cada carácter de la palabra \"python\" en una línea separada.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Utilizando un ciclo while, calcula el factorial de un número entero n introducido por el usuario y muestra el resultado.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Con un ciclo for, imprime los números del 1 al 30 saltando de 3 en 3 (1, 4, 7, …, 28), cada número en una línea.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Mediante un ciclo while, implementa un juego de adivinanza: el programa genera un número aleatorio del 1 al 10 y solicita al usuario que lo adivine. El proceso se repite hasta que el usuario acierte. Muestra un mensaje de felicitación al final.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Con un ciclo for, imprime un triángulo rectángulo de 5 filas usando el carácter '*'.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Utilizando un ciclo while, simula un reloj digital que muestre cada segundo desde 00:00 hasta 00:59 en formato MM:SS, cada valor en una línea.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Con un ciclo for, solicita al usuario que ingrese un número entero positivo y calcula la suma de sus dígitos, mostrando el resultado final.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra la secuencia de Fibonacci empezando por 1, 1, 2, 3, 5, … y termina cuando se alcance el primer valor mayor que 1000.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas vocales (sin distinción de mayúsculas/minúsculas) hay en la frase frase = \"programacion es divertida\" y muestra el total.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese edades una a una. El proceso termina cuando se introduzca -1. Al final, muestra la edad mayor que se haya ingresado.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 0,
        "fileFound": true,
        "feedback": ""
      }
    ],
    "overallScore": 0,
    "totalActivities": 20,
    "completedActivities": 0,
    "summary": "Necesita mejorar. Completó 0/20 actividades (0%) con una calificación promedio de 0.0/5. Se recomienda revisar los conceptos fundamentales.",
    "recommendations": [
      "Completar los archivos faltantes: src/ejercicio_01.py, src/ejercicio_02.py, src/ejercicio_03.py, src/ejercicio_04.py, src/ejercicio_05.py, src/ejercicio_06.py, src/ejercicio_07.py, src/ejercicio_08.py",
      "Revisar y mejorar las actividades con calificación baja",
      "Enfocarse en mejorar la documentación y comentarios del código",
      "Aplicar mejores prácticas de programación"
    ],
    "evaluatedAt": "2025-08-01T04:12:38.901Z",
    "evaluatedBy": "Sistema de Evaluación Masiva"
  },
  "jechavarr/act_ntp_s3": {
    "repositoryUrl": "jechavarr/act_ntp_s3",
    "studentName": "julian echavarria",
    "activities": [
      {
        "activityDescription": "Usando un ciclo for, imprime los números enteros del 0 al 9, cada uno en una línea.",
        "solutionFile": "src/ejercicio_01.py",
        "score": 0,
        "fileFound": false,
        "feedback": ""
      },
      {
        "activityDescription": "Mediante un ciclo while, imprime los números enteros del 10 al 1 en orden descendente, cada número en una línea.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. El código cumple con todos los requisitos de la actividad, mostrando un buen entendimiento del ciclo while."
      },
      {
        "activityDescription": "Con un ciclo for, calcula la suma de todos los enteros del 1 al 100 (inclusive) y muestra el resultado.",
        "solutionFile": "src/ejercicio_03.py",
        "score": 3,
        "fileFound": true,
        "feedback": "El código calcula la suma correctamente, pero imprime el resultado en cada iteración del ciclo. Deberías imprimir la suma solo una vez, después de que el ciclo `for` termine."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese números. El proceso termina cuando el usuario escriba 0. Al final, muestra la suma total de todos los números ingresados.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Se recomienda utilizar un bloque `try-except` para manejar la excepción `ValueError` que puede ocurrir si el usuario ingresa algo que no es un número."
      },
      {
        "activityDescription": "Con un ciclo for, imprime la tabla de multiplicar del 7, es decir, 7 × 1, 7 × 2, …, 7 × 10, cada resultado en una línea.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y cumple con todos los requisitos. El código es legible y eficiente. ¡Buen trabajo!"
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra los primeros 15 múltiplos de 3, comenzando desde 3.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 5,
        "fileFound": true,
        "feedback": "El código resuelve correctamente el problema planteado y presenta una estructura clara y legible. Utiliza las variables de manera eficiente y la lógica del ciclo while es correcta."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas letras 'a' (minúscula) hay en la cadena texto = \"manzana\" y muestra el total.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. El código es legible y cumple con el objetivo de la actividad sin problemas."
      },
      {
        "activityDescription": "Usando un ciclo while, calcula y muestra los cuadrados de los números del 1 al 20 (1², 2², …, 20²), cada resultado en una línea.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código es limpio y fácil de entender, cumpliendo con el objetivo planteado."
      },
      {
        "activityDescription": "Con un ciclo for, imprime todos los números pares del 2 al 50 (ambos inclusive), cada número en una línea.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 3,
        "fileFound": true,
        "feedback": "La primera parte del código resuelve correctamente el problema de imprimir los números pares. Sin embargo, la inclusión del código para imprimir los impares no era parte del requerimiento. Elimina el código innecesario para mejorar la claridad."
      },
      {
        "activityDescription": "Mediante un ciclo while, solicita al usuario que escriba palabras. El proceso termina cuando el usuario escriba la palabra \"fin\". Al final, muestra cuántas palabras se leyeron (sin contar \"fin\").",
        "solutionFile": "src/ejercicio_10.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, conciso y resuelve correctamente el problema planteado. Bien hecho."
      },
      {
        "activityDescription": "Con un ciclo for, imprime cada carácter de la palabra \"python\" en una línea separada.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Solución correcta y concisa. El código es legible y cumple con la descripción del problema."
      },
      {
        "activityDescription": "Utilizando un ciclo while, calcula el factorial de un número entero n introducido por el usuario y muestra el resultado.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 5,
        "fileFound": true,
        "feedback": "El código resuelve correctamente el problema planteado, es legible y sigue buenas prácticas. La solución es completa y funcional."
      },
      {
        "activityDescription": "Con un ciclo for, imprime los números del 1 al 30 saltando de 3 en 3 (1, 4, 7, …, 28), cada número en una línea.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es conciso y fácil de entender, cumpliendo con todos los requisitos del ejercicio."
      },
      {
        "activityDescription": "Mediante un ciclo while, implementa un juego de adivinanza: el programa genera un número aleatorio del 1 al 10 y solicita al usuario que lo adivine. El proceso se repite hasta que el usuario acierte. Muestra un mensaje de felicitación al final.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. El código es limpio y fácil de entender. ¡Excelente trabajo!"
      },
      {
        "activityDescription": "Con un ciclo for, imprime un triángulo rectángulo de 5 filas usando el carácter '*'.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y cumple con los requisitos de la actividad. El código es legible y utiliza eficientemente la multiplicación de strings para lograr el resultado deseado."
      },
      {
        "activityDescription": "Utilizando un ciclo while, simula un reloj digital que muestre cada segundo desde 00:00 hasta 00:59 en formato MM:SS, cada valor en una línea.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Sin embargo, la actividad pedía un reloj de 00:00 a 00:59. El código actual muestra sólo los segundos, sin modificar los minutos. Para completar la actividad, se deben agregar condiciones para manejar el incremento de los minutos."
      },
      {
        "activityDescription": "Con un ciclo for, solicita al usuario que ingrese un número entero positivo y calcula la suma de sus dígitos, mostrando el resultado final.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 5,
        "fileFound": true,
        "feedback": "El código resuelve correctamente el problema planteado. La solución es concisa y fácil de entender, cumpliendo con las buenas prácticas."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra la secuencia de Fibonacci empezando por 1, 1, 2, 3, 5, … y termina cuando se alcance el primer valor mayor que 1000.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, correcto y eficiente para generar la secuencia de Fibonacci hasta el primer valor mayor que 1000."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas vocales (sin distinción de mayúsculas/minúsculas) hay en la frase frase = \"programacion es divertida\" y muestra el total.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Solución correcta y eficiente. El código es limpio, legible y cumple con los requisitos del problema. Bien hecho."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese edades una a una. El proceso termina cuando se introduzca -1. Al final, muestra la edad mayor que se haya ingresado.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y fácil de entender, cumpliendo con todos los requisitos de la actividad."
      }
    ],
    "overallScore": 4.45,
    "totalActivities": 20,
    "completedActivities": 19,
    "summary": "Excelente trabajo. Completó 19/20 actividades (95%) con una calificación promedio de 4.5/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Completar los archivos faltantes: src/ejercicio_01.py"
    ],
    "evaluatedAt": "2025-08-23T01:25:54.990Z",
    "evaluatedBy": "Sistema de Evaluación"
  },
  "yeferlol12/act_ntp_s3": {
    "repositoryUrl": "yeferlol12/act_ntp_s3",
    "studentName": "Yeferson  Santamaria Holguin",
    "activities": [
      {
        "activityDescription": "Usando un ciclo for, imprime los números enteros del 0 al 9, cada uno en una línea.",
        "solutionFile": "src/ejercicio_01.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funciona como se espera. Se puede mejorar la salida del programa, eliminando el texto 'n =' para cumplir estrictamente con la descripción de la actividad (imprimir solo los números)."
      },
      {
        "activityDescription": "Mediante un ciclo while, imprime los números enteros del 10 al 1 en orden descendente, cada número en una línea.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, eficiente y cumple con todos los requisitos. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Con un ciclo for, calcula la suma de todos los enteros del 1 al 100 (inclusive) y muestra el resultado.",
        "solutionFile": "src/ejercicio_03.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Solución correcta y eficiente. El código es claro, conciso y cumple con el objetivo del problema. Excelente trabajo."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese números. El proceso termina cuando el usuario escriba 0. Al final, muestra la suma total de todos los números ingresados.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución funciona correctamente y cumple con los requisitos. Considera usar `int()` en lugar de `float()` si la actividad se enfoca en números enteros y añadir validación de entrada para evitar errores si el usuario ingresa datos no numéricos."
      },
      {
        "activityDescription": "Con un ciclo for, imprime la tabla de multiplicar del 7, es decir, 7 × 1, 7 × 2, …, 7 × 10, cada resultado en una línea.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, conciso y cumple con el objetivo de la actividad, utilizando un ciclo for de manera eficiente para imprimir la tabla del 7."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra los primeros 15 múltiplos de 3, comenzando desde 3.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 4,
        "fileFound": true,
        "feedback": "El código resuelve el problema, pero el valor del contador (48) no es intuitivo para generar 15 múltiplos de 3.  Considera usar un contador explícito para el número de múltiplos generados para mayor claridad."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas letras 'a' (minúscula) hay en la cadena texto = \"manzana\" y muestra el total.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código es legible y cumple con los requisitos de la actividad. ¡Excelente trabajo!"
      },
      {
        "activityDescription": "Usando un ciclo while, calcula y muestra los cuadrados de los números del 1 al 20 (1², 2², …, 20²), cada resultado en una línea.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 2,
        "fileFound": true,
        "feedback": "El código calcula múltiplos de 2 en lugar de cuadrados. La variable 'multiplo' debería ser 'numero * numero' para calcular el cuadrado correctamente."
      },
      {
        "activityDescription": "Con un ciclo for, imprime todos los números pares del 2 al 50 (ambos inclusive), cada número en una línea.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con el objetivo planteado. ¡Buen trabajo!"
      },
      {
        "activityDescription": "Mediante un ciclo while, solicita al usuario que escriba palabras. El proceso termina cuando el usuario escriba la palabra \"fin\". Al final, muestra cuántas palabras se leyeron (sin contar \"fin\").",
        "solutionFile": "src/ejercicio_10.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y fácil de entender, cumpliendo con todos los requisitos del ejercicio."
      },
      {
        "activityDescription": "Con un ciclo for, imprime cada carácter de la palabra \"python\" en una línea separada.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y cumple con el objetivo. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Utilizando un ciclo while, calcula el factorial de un número entero n introducido por el usuario y muestra el resultado.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. El código es legible y sigue las buenas prácticas para calcular el factorial utilizando un bucle `while`."
      },
      {
        "activityDescription": "Con un ciclo for, imprime los números del 1 al 30 saltando de 3 en 3 (1, 4, 7, …, 28), cada número en una línea.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 503 . {\"error\":{\"code\":503,\"message\":\"The model is overloaded. Please try again later.\",\"status\":\"UNAVAILABLE\"}}"
      },
      {
        "activityDescription": "Mediante un ciclo while, implementa un juego de adivinanza: el programa genera un número aleatorio del 1 al 10 y solicita al usuario que lo adivine. El proceso se repite hasta que el usuario acierte. Muestra un mensaje de felicitación al final.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 503 . {\"error\":{\"code\":503,\"message\":\"The model is overloaded. Please try again later.\",\"status\":\"UNAVAILABLE\"}}"
      },
      {
        "activityDescription": "Con un ciclo for, imprime un triángulo rectángulo de 5 filas usando el carácter '*'.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y fácil de entender, cumpliendo con todos los requisitos de la actividad."
      },
      {
        "activityDescription": "Utilizando un ciclo while, simula un reloj digital que muestre cada segundo desde 00:00 hasta 00:59 en formato MM:SS, cada valor en una línea.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es funcional y produce el resultado esperado. Sin embargo, solo itera hasta 00:59. Para simular un reloj completo que empiece en 00:00 y termine en 00:59 se requeriría un bucle externo para controlar los minutos, y un bucle interno para los segundos."
      },
      {
        "activityDescription": "Con un ciclo for, solicita al usuario que ingrese un número entero positivo y calcula la suma de sus dígitos, mostrando el resultado final.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 503 . {\"error\":{\"code\":503,\"message\":\"The model is overloaded. Please try again later.\",\"status\":\"UNAVAILABLE\"}}"
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra la secuencia de Fibonacci empezando por 1, 1, 2, 3, 5, … y termina cuando se alcance el primer valor mayor que 1000.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con los requisitos del problema de Fibonacci hasta el valor límite."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas vocales (sin distinción de mayúsculas/minúsculas) hay en la frase frase = \"programacion es divertida\" y muestra el total.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con el objetivo planteado sin problemas."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese edades una a una. El proceso termina cuando se introduzca -1. Al final, muestra la edad mayor que se haya ingresado.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Se podría mejorar la validación de la entrada para asegurarse de que el usuario ingresa un número y manejar posibles errores al convertir la entrada a entero."
      }
    ],
    "overallScore": 3.85,
    "totalActivities": 20,
    "completedActivities": 17,
    "summary": "Buen trabajo general. Completó 17/20 actividades (85%) con una calificación promedio de 3.9/5. Hay oportunidades de mejora en algunos aspectos.",
    "recommendations": [
      "Completar los archivos faltantes: src/ejercicio_13.py, src/ejercicio_14.py, src/ejercicio_17.py",
      "Revisar y mejorar las actividades con calificación baja"
    ],
    "evaluatedAt": "2025-08-21T13:34:39.616Z",
    "evaluatedBy": "Sistema de Evaluación Masiva"
  },
  "Sebastian0031/act_ntp_s3": {
    "repositoryUrl": "Sebastian0031/act_ntp_s3",
    "studentName": "Sebastián Urrego Ochoa",
    "activities": [
      {
        "activityDescription": "Usando un ciclo for, imprime los números enteros del 0 al 9, cada uno en una línea.",
        "solutionFile": "src/ejercicio_01.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, legible y cumple con los requisitos de la actividad."
      },
      {
        "activityDescription": "Mediante un ciclo while, imprime los números enteros del 10 al 1 en orden descendente, cada número en una línea.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. Utiliza un ciclo while de manera eficiente para lograr el resultado esperado y el código es fácil de leer."
      },
      {
        "activityDescription": "Con un ciclo for, calcula la suma de todos los enteros del 1 al 100 (inclusive) y muestra el resultado.",
        "solutionFile": "src/ejercicio_03.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución calcula la suma correctamente, pero imprime el resultado en cada iteración del bucle en lugar de solo al final. Mueve el `print` fuera del `for` para una mejor presentación."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese números. El proceso termina cuando el usuario escriba 0. Al final, muestra la suma total de todos los números ingresados.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código es limpio, fácil de entender y cumple con todos los requisitos de la actividad."
      },
      {
        "activityDescription": "Con un ciclo for, imprime la tabla de multiplicar del 7, es decir, 7 × 1, 7 × 2, …, 7 × 10, cada resultado en una línea.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. El código cumple con el objetivo del ejercicio y está bien estructurado."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra los primeros 15 múltiplos de 3, comenzando desde 3.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio, fácil de entender y cumple con los requisitos del problema planteado."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas letras 'a' (minúscula) hay en la cadena texto = \"manzana\" y muestra el total.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con el objetivo propuesto sin problemas."
      },
      {
        "activityDescription": "Usando un ciclo while, calcula y muestra los cuadrados de los números del 1 al 20 (1², 2², …, 20²), cada resultado en una línea.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio, legible y cumple con el objetivo de la actividad sin problemas."
      },
      {
        "activityDescription": "Con un ciclo for, imprime todos los números pares del 2 al 50 (ambos inclusive), cada número en una línea.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Solución correcta y eficiente. El código es claro y conciso, utilizando el `range` con el paso adecuado para generar los números pares."
      },
      {
        "activityDescription": "Mediante un ciclo while, solicita al usuario que escriba palabras. El proceso termina cuando el usuario escriba la palabra \"fin\". Al final, muestra cuántas palabras se leyeron (sin contar \"fin\").",
        "solutionFile": "src/ejercicio_10.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y fácil de entender, resolviendo el problema planteado de manera óptima."
      },
      {
        "activityDescription": "Con un ciclo for, imprime cada carácter de la palabra \"python\" en una línea separada.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código cumple con el objetivo de la actividad de forma eficiente y legible."
      },
      {
        "activityDescription": "Utilizando un ciclo while, calcula el factorial de un número entero n introducido por el usuario y muestra el resultado.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, legible y calcula correctamente el factorial utilizando un ciclo while. Buen trabajo!"
      },
      {
        "activityDescription": "Con un ciclo for, imprime los números del 1 al 30 saltando de 3 en 3 (1, 4, 7, …, 28), cada número en una línea.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código cumple con el objetivo de la actividad de forma eficiente."
      },
      {
        "activityDescription": "Mediante un ciclo while, implementa un juego de adivinanza: el programa genera un número aleatorio del 1 al 10 y solicita al usuario que lo adivine. El proceso se repite hasta que el usuario acierte. Muestra un mensaje de felicitación al final.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, funcional y bien estructurada. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Con un ciclo for, imprime un triángulo rectángulo de 5 filas usando el carácter '*'.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, fácil de entender y resuelve el problema planteado de manera eficiente. ¡Buen trabajo!"
      },
      {
        "activityDescription": "Utilizando un ciclo while, simula un reloj digital que muestre cada segundo desde 00:00 hasta 00:59 en formato MM:SS, cada valor en una línea.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. El formato de salida es el esperado y utiliza buenas prácticas al usar f-strings para el formateo."
      },
      {
        "activityDescription": "Con un ciclo for, solicita al usuario que ingrese un número entero positivo y calcula la suma de sus dígitos, mostrando el resultado final.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, legible y funcional. Cumple con todos los requisitos de la actividad."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra la secuencia de Fibonacci empezando por 1, 1, 2, 3, 5, … y termina cuando se alcance el primer valor mayor que 1000.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y eficiente. El código genera la secuencia de Fibonacci hasta el valor solicitado usando un ciclo while de manera óptima."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas vocales (sin distinción de mayúsculas/minúsculas) hay en la frase frase = \"programacion es divertida\" y muestra el total.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, conciso y cumple con el objetivo de la actividad. Bien hecho."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese edades una a una. El proceso termina cuando se introduzca -1. Al final, muestra la edad mayor que se haya ingresado.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y fácil de entender, cumpliendo con el objetivo de la actividad."
      }
    ],
    "overallScore": 4.95,
    "totalActivities": 20,
    "completedActivities": 20,
    "summary": "Excelente trabajo. Completó 20/20 actividades (100%) con una calificación promedio de 5.0/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Continuar con el excelente trabajo y mantener la calidad del código"
    ],
    "evaluatedAt": "2025-08-21T13:27:27.190Z",
    "evaluatedBy": "Sistema de Evaluación Masiva"
  },
  "Mateogv09/act_ntp_s3": {
    "repositoryUrl": "Mateogv09/act_ntp_s3",
    "studentName": "Mateo Gonzalez Villegas",
    "activities": [
      {
        "activityDescription": "Usando un ciclo for, imprime los números enteros del 0 al 9, cada uno en una línea.",
        "solutionFile": "src/ejercicio_01.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y cumple con los requerimientos. El código es conciso y fácil de entender."
      },
      {
        "activityDescription": "Mediante un ciclo while, imprime los números enteros del 10 al 1 en orden descendente, cada número en una línea.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. El código cumple con la descripción de la actividad y utiliza buenas prácticas."
      },
      {
        "activityDescription": "Con un ciclo for, calcula la suma de todos los enteros del 1 al 100 (inclusive) y muestra el resultado.",
        "solutionFile": "src/ejercicio_03.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y fácil de entender. ¡Excelente trabajo!"
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese números. El proceso termina cuando el usuario escriba 0. Al final, muestra la suma total de todos los números ingresados.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, conciso y resuelve correctamente el problema planteado utilizando un ciclo `while` y la condición de salida adecuada. ¡Buen trabajo!"
      },
      {
        "activityDescription": "Con un ciclo for, imprime la tabla de multiplicar del 7, es decir, 7 × 1, 7 × 2, …, 7 × 10, cada resultado en una línea.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y eficiente. Utiliza un bucle for de manera adecuada y la salida está bien formateada."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra los primeros 15 múltiplos de 3, comenzando desde 3.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Solución correcta y eficiente. El código es claro, conciso y cumple con todos los requisitos de la actividad."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas letras 'a' (minúscula) hay en la cadena texto = \"manzana\" y muestra el total.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código es legible y cumple con el objetivo de la actividad."
      },
      {
        "activityDescription": "Usando un ciclo while, calcula y muestra los cuadrados de los números del 1 al 20 (1², 2², …, 20²), cada resultado en una línea.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con los requisitos del problema."
      },
      {
        "activityDescription": "Con un ciclo for, imprime todos los números pares del 2 al 50 (ambos inclusive), cada número en una línea.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. Utiliza un ciclo for con un paso adecuado para imprimir los números pares en el rango solicitado."
      },
      {
        "activityDescription": "Mediante un ciclo while, solicita al usuario que escriba palabras. El proceso termina cuando el usuario escriba la palabra \"fin\". Al final, muestra cuántas palabras se leyeron (sin contar \"fin\").",
        "solutionFile": "src/ejercicio_10.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y fácil de entender, cumpliendo con todos los requisitos de la actividad."
      },
      {
        "activityDescription": "Con un ciclo for, imprime cada carácter de la palabra \"python\" en una línea separada.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y cumple con los requerimientos. El código es legible y funcional."
      },
      {
        "activityDescription": "Utilizando un ciclo while, calcula el factorial de un número entero n introducido por el usuario y muestra el resultado.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 5,
        "fileFound": true,
        "feedback": "El código es conciso, correcto y funcional. Calcula el factorial de un número usando un bucle while de forma eficiente. Buen trabajo."
      },
      {
        "activityDescription": "Con un ciclo for, imprime los números del 1 al 30 saltando de 3 en 3 (1, 4, 7, …, 28), cada número en una línea.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Utiliza el `range` con el paso adecuado para lograr el objetivo."
      },
      {
        "activityDescription": "Mediante un ciclo while, implementa un juego de adivinanza: el programa genera un número aleatorio del 1 al 10 y solicita al usuario que lo adivine. El proceso se repite hasta que el usuario acierte. Muestra un mensaje de felicitación al final.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y cumple con todos los requisitos. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Con un ciclo for, imprime un triángulo rectángulo de 5 filas usando el carácter '*'.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa, logrando el objetivo con un código legible. El uso del operador '*' para replicar el caracter es adecuado."
      },
      {
        "activityDescription": "Utilizando un ciclo while, simula un reloj digital que muestre cada segundo desde 00:00 hasta 00:59 en formato MM:SS, cada valor en una línea.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Utiliza `zfill` de manera eficiente para el formato solicitado."
      },
      {
        "activityDescription": "Con un ciclo for, solicita al usuario que ingrese un número entero positivo y calcula la suma de sus dígitos, mostrando el resultado final.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, legible y utiliza una comprensión de lista para calcular la suma de los dígitos de manera eficiente. Bien hecho."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra la secuencia de Fibonacci empezando por 1, 1, 2, 3, 5, … y termina cuando se alcance el primer valor mayor que 1000.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y eficiente para el problema planteado. Utiliza la asignación simultánea de Python de forma elegante."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas vocales (sin distinción de mayúsculas/minúsculas) hay en la frase frase = \"programacion es divertida\" y muestra el total.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, legible y resuelve el problema eficientemente utilizando una comprensión de lista y la función `sum`."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese edades una a una. El proceso termina cuando se introduzca -1. Al final, muestra la edad mayor que se haya ingresado.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Solución correcta y eficiente. El código es claro, conciso y fácil de entender. Bien hecho."
      }
    ],
    "overallScore": 5,
    "totalActivities": 20,
    "completedActivities": 20,
    "summary": "Completó 20/20 actividades con una calificación promedio de 5.0/5.",
    "recommendations": [
      "Continuar con el buen trabajo"
    ],
    "evaluatedAt": "2025-08-08T23:20:03.486Z",
    "evaluatedBy": "Sistema de Evaluación"
  },
  "HarrisonRM/act_ntp_s3": {
    "repositoryUrl": "HarrisonRM/act_ntp_s3",
    "studentName": "Harrison Olvany Rengifo Marin",
    "activities": [
      {
        "activityDescription": "Usando un ciclo for, imprime los números enteros del 0 al 9, cada uno en una línea.",
        "solutionFile": "src/ejercicio_01.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y cumple con todos los requisitos. El código es legible y funcional."
      },
      {
        "activityDescription": "Mediante un ciclo while, imprime los números enteros del 10 al 1 en orden descendente, cada número en una línea.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, conciso y cumple con todos los requisitos del ejercicio. Bien hecho."
      },
      {
        "activityDescription": "Con un ciclo for, calcula la suma de todos los enteros del 1 al 100 (inclusive) y muestra el resultado.",
        "solutionFile": "src/ejercicio_03.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 503 . {\"error\":{\"code\":503,\"message\":\"The model is overloaded. Please try again later.\",\"status\":\"UNAVAILABLE\"}}"
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese números. El proceso termina cuando el usuario escriba 0. Al final, muestra la suma total de todos los números ingresados.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional, pero la suma del último número (0) es innecesaria. Se podría mejorar evitando la suma del cero antes de imprimir el resultado final."
      },
      {
        "activityDescription": "Con un ciclo for, imprime la tabla de multiplicar del 7, es decir, 7 × 1, 7 × 2, …, 7 × 10, cada resultado en una línea.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. El código es legible y cumple con el objetivo del problema sin problemas."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra los primeros 15 múltiplos de 3, comenzando desde 3.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta pero el ciclo `while` podría ser más explícito en cuanto a la cantidad de múltiplos a generar, en lugar de depender del valor del contador. El cálculo del múltiplo dentro del loop es redundante, ya que `contador` ya es el múltiplo."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas letras 'a' (minúscula) hay en la cadena texto = \"manzana\" y muestra el total.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Solución correcta y eficiente. El código es legible y cumple con el objetivo planteado utilizando un ciclo for y una condición if de manera clara y concisa."
      },
      {
        "activityDescription": "Usando un ciclo while, calcula y muestra los cuadrados de los números del 1 al 20 (1², 2², …, 20²), cada resultado en una línea.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 4,
        "fileFound": true,
        "feedback": "El código resuelve correctamente el problema, pero se solicitaba usar un ciclo `while` en lugar de `for`. Considera usar `while` para cumplir estrictamente con los requisitos."
      },
      {
        "activityDescription": "Con un ciclo for, imprime todos los números pares del 2 al 50 (ambos inclusive), cada número en una línea.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es conciso y cumple con los requisitos del problema."
      },
      {
        "activityDescription": "Mediante un ciclo while, solicita al usuario que escriba palabras. El proceso termina cuando el usuario escriba la palabra \"fin\". Al final, muestra cuántas palabras se leyeron (sin contar \"fin\").",
        "solutionFile": "src/ejercicio_10.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El uso de `.lower()` para la comparación con 'fin' es una buena práctica para hacer el programa más robusto."
      },
      {
        "activityDescription": "Con un ciclo for, imprime cada carácter de la palabra \"python\" en una línea separada.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y fácil de entender. Cumple con todos los requisitos de la actividad."
      },
      {
        "activityDescription": "Utilizando un ciclo while, calcula el factorial de un número entero n introducido por el usuario y muestra el resultado.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 3,
        "fileFound": true,
        "feedback": "El código está incompleto. Falta el ciclo `while` para calcular el factorial y la impresión del resultado. Completa el código con la lógica faltante y considera añadir validación para números negativos."
      },
      {
        "activityDescription": "Con un ciclo for, imprime los números del 1 al 30 saltando de 3 en 3 (1, 4, 7, …, 28), cada número en una línea.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Utiliza el ciclo `for` con un paso adecuado para imprimir los números solicitados de manera eficiente."
      },
      {
        "activityDescription": "Mediante un ciclo while, implementa un juego de adivinanza: el programa genera un número aleatorio del 1 al 10 y solicita al usuario que lo adivine. El proceso se repite hasta que el usuario acierte. Muestra un mensaje de felicitación al final.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, funcional y cumple con todos los requisitos de la actividad. Bien hecho."
      },
      {
        "activityDescription": "Con un ciclo for, imprime un triángulo rectángulo de 5 filas usando el carácter '*'.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, claro y resuelve el problema planteado de manera eficiente utilizando un ciclo for y la multiplicación de strings. No hay necesidad de mejoras significativas."
      },
      {
        "activityDescription": "Utilizando un ciclo while, simula un reloj digital que muestre cada segundo desde 00:00 hasta 00:59 en formato MM:SS, cada valor en una línea.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución funciona correctamente y cumple con los requisitos. Sin embargo, la descripción solicitaba un ciclo `while` en lugar de ciclos `for`. Considera usar `while` para ajustarse completamente a la descripción."
      },
      {
        "activityDescription": "Con un ciclo for, solicita al usuario que ingrese un número entero positivo y calcula la suma de sus dígitos, mostrando el resultado final.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Sin embargo, la descripción indica el uso de un ciclo `for`, pero el código utiliza un ciclo `while`. Considera usar un ciclo `for` como se especifica en la descripción para mejorar la adherencia a los requisitos."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra la secuencia de Fibonacci empezando por 1, 1, 2, 3, 5, … y termina cuando se alcance el primer valor mayor que 1000.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y sigue las buenas prácticas. La pausa `time.sleep()` es un detalle interesante para visualizar la secuencia."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas vocales (sin distinción de mayúsculas/minúsculas) hay en la frase frase = \"programacion es divertida\" y muestra el total.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y eficiente. El código es legible y utiliza buenas prácticas al convertir la frase a minúsculas para la comparación."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese edades una a una. El proceso termina cuando se introduzca -1. Al final, muestra la edad mayor que se haya ingresado.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y eficiente. El código es bien estructurado y fácil de entender, cumpliendo con todos los requisitos."
      }
    ],
    "overallScore": 4.4,
    "totalActivities": 20,
    "completedActivities": 19,
    "summary": "Excelente trabajo. Completó 19/20 actividades (95%) con una calificación promedio de 4.4/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Completar los archivos faltantes: src/ejercicio_03.py"
    ],
    "evaluatedAt": "2025-08-21T12:34:48.738Z",
    "evaluatedBy": "Sistema de Evaluación de No Calificados"
  },
  "garciaStizy/act_ntp_s3": {
    "repositoryUrl": "garciaStizy/act_ntp_s3",
    "studentName": "Estudiante desconocido",
    "activities": [
      {
        "activityDescription": "Usando un ciclo for, imprime los números enteros del 0 al 9, cada uno en una línea.",
        "solutionFile": "src/ejercicio_01.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Mediante un ciclo while, imprime los números enteros del 10 al 1 en orden descendente, cada número en una línea.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Con un ciclo for, calcula la suma de todos los enteros del 1 al 100 (inclusive) y muestra el resultado.",
        "solutionFile": "src/ejercicio_03.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese números. El proceso termina cuando el usuario escriba 0. Al final, muestra la suma total de todos los números ingresados.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Con un ciclo for, imprime la tabla de multiplicar del 7, es decir, 7 × 1, 7 × 2, …, 7 × 10, cada resultado en una línea.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra los primeros 15 múltiplos de 3, comenzando desde 3.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas letras 'a' (minúscula) hay en la cadena texto = \"manzana\" y muestra el total.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Usando un ciclo while, calcula y muestra los cuadrados de los números del 1 al 20 (1², 2², …, 20²), cada resultado en una línea.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Con un ciclo for, imprime todos los números pares del 2 al 50 (ambos inclusive), cada número en una línea.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Mediante un ciclo while, solicita al usuario que escriba palabras. El proceso termina cuando el usuario escriba la palabra \"fin\". Al final, muestra cuántas palabras se leyeron (sin contar \"fin\").",
        "solutionFile": "src/ejercicio_10.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Con un ciclo for, imprime cada carácter de la palabra \"python\" en una línea separada.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Utilizando un ciclo while, calcula el factorial de un número entero n introducido por el usuario y muestra el resultado.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Con un ciclo for, imprime los números del 1 al 30 saltando de 3 en 3 (1, 4, 7, …, 28), cada número en una línea.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Mediante un ciclo while, implementa un juego de adivinanza: el programa genera un número aleatorio del 1 al 10 y solicita al usuario que lo adivine. El proceso se repite hasta que el usuario acierte. Muestra un mensaje de felicitación al final.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Con un ciclo for, imprime un triángulo rectángulo de 5 filas usando el carácter '*'.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Utilizando un ciclo while, simula un reloj digital que muestre cada segundo desde 00:00 hasta 00:59 en formato MM:SS, cada valor en una línea.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Con un ciclo for, solicita al usuario que ingrese un número entero positivo y calcula la suma de sus dígitos, mostrando el resultado final.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra la secuencia de Fibonacci empezando por 1, 1, 2, 3, 5, … y termina cuando se alcance el primer valor mayor que 1000.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas vocales (sin distinción de mayúsculas/minúsculas) hay en la frase frase = \"programacion es divertida\" y muestra el total.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese edades una a una. El proceso termina cuando se introduzca -1. Al final, muestra la edad mayor que se haya ingresado.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Archivo vacío - sin contenido para evaluar"
      }
    ],
    "overallScore": 0,
    "totalActivities": 20,
    "completedActivities": 0,
    "summary": "Necesita mejorar. Completó 0/20 actividades (0%) con una calificación promedio de 0.0/5. Se recomienda revisar los conceptos fundamentales.",
    "recommendations": [
      "Revisar y mejorar las actividades con calificación baja",
      "Enfocarse en mejorar la documentación y comentarios del código",
      "Aplicar mejores prácticas de programación"
    ],
    "evaluatedAt": "2025-08-21T17:28:40.483Z",
    "evaluatedBy": "Sistema de Evaluación de No Calificados"
  },
  "JoelSMR/act_ntp_s3": {
    "repositoryUrl": "JoelSMR/act_ntp_s3",
    "studentName": "Joel Stiven Mariños Rivera",
    "activities": [
      {
        "activityDescription": "Usando un ciclo for, imprime los números enteros del 0 al 9, cada uno en una línea.",
        "solutionFile": "src/ejercicio_01.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. Cumple con todos los requisitos de la actividad, utilizando un ciclo for de manera eficiente."
      },
      {
        "activityDescription": "Mediante un ciclo while, imprime los números enteros del 10 al 1 en orden descendente, cada número en una línea.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, legible y cumple con el objetivo de la actividad de manera eficiente. No hay aspectos significativos a mejorar."
      },
      {
        "activityDescription": "Con un ciclo for, calcula la suma de todos los enteros del 1 al 100 (inclusive) y muestra el resultado.",
        "solutionFile": "src/ejercicio_03.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y fácil de entender. El código es limpio y sigue las buenas prácticas para este tipo de problema."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese números. El proceso termina cuando el usuario escriba 0. Al final, muestra la suma total de todos los números ingresados.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. El código es limpio y fácil de entender, cumple con los requisitos de la actividad."
      },
      {
        "activityDescription": "Con un ciclo for, imprime la tabla de multiplicar del 7, es decir, 7 × 1, 7 × 2, …, 7 × 10, cada resultado en una línea.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, legible y cumple con el objetivo de la actividad utilizando un bucle for y formateo de strings adecuadamente."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra los primeros 15 múltiplos de 3, comenzando desde 3.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 3,
        "fileFound": true,
        "feedback": "El código genera los múltiplos de 3 correctamente, pero incluye una impresión adicional dentro del bucle que no es necesaria y afecta la claridad.  Debes enfocarte en la concisión del código."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas letras 'a' (minúscula) hay en la cadena texto = \"manzana\" y muestra el total.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. El código es legible y cumple con el objetivo propuesto sin problemas."
      },
      {
        "activityDescription": "Usando un ciclo while, calcula y muestra los cuadrados de los números del 1 al 20 (1², 2², …, 20²), cada resultado en una línea.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 3,
        "fileFound": true,
        "feedback": "La solución calcula e imprime los cuadrados correctamente, pero imprime incorrectamente un mensaje adicional dentro del bucle. Deberías quitar la línea `print(f'El cuadrado de {i} es: {cuadrado}')`."
      },
      {
        "activityDescription": "Con un ciclo for, imprime todos los números pares del 2 al 50 (ambos inclusive), cada número en una línea.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta e imprime los números pares del 2 al 50. Sin embargo, la impresión adicional dentro del ciclo `print(f\"El número par en la posición {i // 2} es: {i}\")` no estaba solicitada en la descripción del problema y reduce la claridad del output. Remueve esta línea para ajustarte a la consigna."
      },
      {
        "activityDescription": "Mediante un ciclo while, solicita al usuario que escriba palabras. El proceso termina cuando el usuario escriba la palabra \"fin\". Al final, muestra cuántas palabras se leyeron (sin contar \"fin\").",
        "solutionFile": "src/ejercicio_10.py",
        "score": 3,
        "fileFound": true,
        "feedback": "El código funciona correctamente, pero la impresión del total de palabras dentro del bucle es redundante y confusa. Debería moverse la impresión del total fuera del bucle para una mejor claridad."
      },
      {
        "activityDescription": "Con un ciclo for, imprime cada carácter de la palabra \"python\" en una línea separada.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y cumple con el objetivo de la actividad. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Utilizando un ciclo while, calcula el factorial de un número entero n introducido por el usuario y muestra el resultado.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio, legible y cumple con el objetivo de calcular el factorial utilizando un ciclo while."
      },
      {
        "activityDescription": "Con un ciclo for, imprime los números del 1 al 30 saltando de 3 en 3 (1, 4, 7, …, 28), cada número en una línea.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y eficiente. Utiliza el ciclo `for` con el `range` de manera adecuada para generar la secuencia deseada."
      },
      {
        "activityDescription": "Mediante un ciclo while, implementa un juego de adivinanza: el programa genera un número aleatorio del 1 al 10 y solicita al usuario que lo adivine. El proceso se repite hasta que el usuario acierte. Muestra un mensaje de felicitación al final.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La lógica del juego es correcta y funciona como se espera. Sin embargo, el mensaje de felicitación se imprime dentro del ciclo while, lo que hace que se muestre antes de tiempo. Mueve el `print(\"¡Felicidades! Adivinaste el número.\")` fuera del bucle para que se ejecute solo cuando se adivine el número."
      },
      {
        "activityDescription": "Con un ciclo for, imprime un triángulo rectángulo de 5 filas usando el carácter '*'.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y cumple con el objetivo. El código es legible y eficiente."
      },
      {
        "activityDescription": "Utilizando un ciclo while, simula un reloj digital que muestre cada segundo desde 00:00 hasta 00:59 en formato MM:SS, cada valor en una línea.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución cumple con el objetivo principal. Considera añadir validaciones adicionales para cubrir todos los casos posibles y manejar errores, además de documentar el código."
      },
      {
        "activityDescription": "Con un ciclo for, solicita al usuario que ingrese un número entero positivo y calcula la suma de sus dígitos, mostrando el resultado final.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, legible y cumple con todos los requisitos de la actividad. ¡Bien hecho!"
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra la secuencia de Fibonacci empezando por 1, 1, 2, 3, 5, … y termina cuando se alcance el primer valor mayor que 1000.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, eficiente y legible. El código genera la secuencia de Fibonacci hasta el primer número mayor que 1000 usando un ciclo `while` y asignación múltiple de manera concisa."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas vocales (sin distinción de mayúsculas/minúsculas) hay en la frase frase = \"programacion es divertida\" y muestra el total.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio, legible y cumple con el objetivo planteado."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese edades una a una. El proceso termina cuando se introduzca -1. Al final, muestra la edad mayor que se haya ingresado.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Podría mejorarse evitando la asignación inicial de `mayor = 0` y manejar el caso de la entrada -1 de forma más elegante para evitar que -1 sea considerada la edad mayor si es la primera entrada.  También podrías considerar usar un `try-except` para manejar errores si el usuario ingresa algo que no es un número."
      }
    ],
    "overallScore": 4.5,
    "totalActivities": 20,
    "completedActivities": 20,
    "summary": "Excelente trabajo. Completó 20/20 actividades (100%) con una calificación promedio de 4.5/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Continuar con el excelente trabajo y mantener la calidad del código"
    ],
    "evaluatedAt": "2025-08-21T17:35:50.328Z",
    "evaluatedBy": "Sistema de Evaluación de No Calificados"
  },
  "PeperoniSword/act_ntp_s3": {
    "repositoryUrl": "PeperoniSword/act_ntp_s3",
    "studentName": "Juan Miguel Santamaría Múnera",
    "activities": [
      {
        "activityDescription": "Usando un ciclo for, imprime los números enteros del 0 al 9, cada uno en una línea.",
        "solutionFile": "src/ejercicio_01.py",
        "score": 3,
        "fileFound": true,
        "feedback": "La solución utiliza una comprensión de lista para imprimir, lo cual no es el uso más común para tareas de impresión secuencial. Además, empieza en 1 en vez de 0, por lo que no cumple completamente con la descripción de la actividad."
      },
      {
        "activityDescription": "Mediante un ciclo while, imprime los números enteros del 10 al 1 en orden descendente, cada número en una línea.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código es legible y cumple con el objetivo de la actividad utilizando un ciclo while de manera eficiente."
      },
      {
        "activityDescription": "Con un ciclo for, calcula la suma de todos los enteros del 1 al 100 (inclusive) y muestra el resultado.",
        "solutionFile": "src/ejercicio_03.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código es legible y cumple con el objetivo de la actividad."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese números. El proceso termina cuando el usuario escriba 0. Al final, muestra la suma total de todos los números ingresados.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 3,
        "fileFound": true,
        "feedback": "El código resuelve el problema, pero falta acumular la suma de los números ingresados. Necesitas una variable para guardar la suma y actualizarla en cada iteración del ciclo."
      },
      {
        "activityDescription": "Con un ciclo for, imprime la tabla de multiplicar del 7, es decir, 7 × 1, 7 × 2, …, 7 × 10, cada resultado en una línea.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa, utilizando una comprensión de lista para imprimir la tabla del 7.  Considera usar un bucle `for` tradicional para mayor legibilidad en este caso específico, aunque la solución actual funciona."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra los primeros 15 múltiplos de 3, comenzando desde 3.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y fácil de entender, cumpliendo con el objetivo de la actividad."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas letras 'a' (minúscula) hay en la cadena texto = \"manzana\" y muestra el total.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y eficiente. Se utiliza una función para encapsular la lógica, lo cual es una buena práctica."
      },
      {
        "activityDescription": "Usando un ciclo while, calcula y muestra los cuadrados de los números del 1 al 20 (1², 2², …, 20²), cada resultado en una línea.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y fácil de entender. ¡Buen trabajo!"
      },
      {
        "activityDescription": "Con un ciclo for, imprime todos los números pares del 2 al 50 (ambos inclusive), cada número en una línea.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa utilizando una comprensión de lista. Sin embargo, el uso de `print` dentro de la comprensión de lista se considera menos legible que un bucle for explícito para este caso. Considera usar un bucle for tradicional para mayor claridad."
      },
      {
        "activityDescription": "Mediante un ciclo while, solicita al usuario que escriba palabras. El proceso termina cuando el usuario escriba la palabra \"fin\". Al final, muestra cuántas palabras se leyeron (sin contar \"fin\").",
        "solutionFile": "src/ejercicio_10.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución resuelve el problema correctamente. Se puede mejorar la claridad del código eliminando la variable `palabra_lower` ya que se utiliza directamente en el `if` dentro del ciclo. Considera usar `len(contenedor)` para obtener la cantidad de palabras en lugar de mantener un contador."
      },
      {
        "activityDescription": "Con un ciclo for, imprime cada carácter de la palabra \"python\" en una línea separada.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa, utilizando una comprensión de lista para imprimir cada carácter. Aunque funcional, el uso de una comprensión de lista solo para imprimir puede ser menos legible que un ciclo for tradicional en este caso."
      },
      {
        "activityDescription": "Utilizando un ciclo while, calcula el factorial de un número entero n introducido por el usuario y muestra el resultado.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 0,
        "fileFound": true,
        "feedback": "Contenido insuficiente - solo comentarios o código trivial"
      },
      {
        "activityDescription": "Con un ciclo for, imprime los números del 1 al 30 saltando de 3 en 3 (1, 4, 7, …, 28), cada número en una línea.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El uso de la comprensión de listas para imprimir los números es conciso y eficiente."
      },
      {
        "activityDescription": "Mediante un ciclo while, implementa un juego de adivinanza: el programa genera un número aleatorio del 1 al 10 y solicita al usuario que lo adivine. El proceso se repite hasta que el usuario acierte. Muestra un mensaje de felicitación al final.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es funcional y correcta. Sin embargo, la generación del número aleatorio debería estar fuera del ciclo `while` para que el número a adivinar sea el mismo durante toda la partida. Se podría mejorar la legibilidad añadiendo un mensaje de error si el usuario no acierta."
      },
      {
        "activityDescription": "Con un ciclo for, imprime un triángulo rectángulo de 5 filas usando el carácter '*'.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa utilizando una comprensión de lista. Podrías mejorar la legibilidad utilizando un bucle for tradicional en lugar de una comprensión de lista con efecto secundario (impresión)."
      },
      {
        "activityDescription": "Utilizando un ciclo while, simula un reloj digital que muestre cada segundo desde 00:00 hasta 00:59 en formato MM:SS, cada valor en una línea.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 3,
        "fileFound": true,
        "feedback": "El código cumple parcialmente con el objetivo, pero tiene errores. La inicialización del contador de minutos es correcta, pero la lógica del ciclo while y el manejo de segundos no son del todo correctos, impidiendo que llegue al segundo 59 y que se formatee correctamente los segundos menores a 10 (ej. 01, 02)."
      },
      {
        "activityDescription": "Con un ciclo for, solicita al usuario que ingrese un número entero positivo y calcula la suma de sus dígitos, mostrando el resultado final.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución funciona correctamente. Se podría mejorar la legibilidad incluyendo validación de entrada para asegurar que el usuario ingrese un número y agregando comentarios explicando el propósito del código."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra la secuencia de Fibonacci empezando por 1, 1, 2, 3, 5, … y termina cuando se alcance el primer valor mayor que 1000.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 3,
        "fileFound": true,
        "feedback": "El código genera la secuencia de Fibonacci, pero imprime los números de forma incorrecta (imprime n1, n2 y luego n3 en cada iteración). Debería imprimir la secuencia completa dentro del ciclo while para mostrar la secuencia correcta hasta el primer número mayor que 1000."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas vocales (sin distinción de mayúsculas/minúsculas) hay en la frase frase = \"programacion es divertida\" y muestra el total.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Podrías mejorar la legibilidad usando lower() para evitar tener que definir vocales en minúsculas y podrías usar un comentario al inicio para explicar el propósito del script."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese edades una a una. El proceso termina cuando se introduzca -1. Al final, muestra la edad mayor que se haya ingresado.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución funciona correctamente y cumple con los requisitos. Podrías mejorar la legibilidad evitando el `continue` dentro del `if` y usando una variable más descriptiva para `control`."
      }
    ],
    "overallScore": 3.9,
    "totalActivities": 20,
    "completedActivities": 19,
    "summary": "Buen trabajo general. Completó 19/20 actividades (95%) con una calificación promedio de 3.9/5. Hay oportunidades de mejora en algunos aspectos.",
    "recommendations": [
      "Revisar y mejorar las actividades con calificación baja"
    ],
    "evaluatedAt": "2025-08-22T23:12:43.401Z",
    "evaluatedBy": "Sistema de Evaluación"
  },
  "Marinalzate/act_ntp_s3": {
    "repositoryUrl": "Marinalzate/act_ntp_s3",
    "studentName": "Emanuel Marin Alzate",
    "activities": [
      {
        "activityDescription": "Usando un ciclo for, imprime los números enteros del 0 al 9, cada uno en una línea.",
        "solutionFile": "src/ejercicio_01.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, legible y cumple con los requisitos de la actividad de manera eficiente."
      },
      {
        "activityDescription": "Mediante un ciclo while, imprime los números enteros del 10 al 1 en orden descendente, cada número en una línea.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio, fácil de entender y cumple con los requisitos del ejercicio."
      },
      {
        "activityDescription": "Con un ciclo for, calcula la suma de todos los enteros del 1 al 100 (inclusive) y muestra el resultado.",
        "solutionFile": "src/ejercicio_03.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y sigue las buenas prácticas básicas. ¡Excelente trabajo!"
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese números. El proceso termina cuando el usuario escriba 0. Al final, muestra la suma total de todos los números ingresados.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y bien estructurada. El código funciona como se espera y es fácil de entender."
      },
      {
        "activityDescription": "Con un ciclo for, imprime la tabla de multiplicar del 7, es decir, 7 × 1, 7 × 2, …, 7 × 10, cada resultado en una línea.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Solución correcta y eficiente. El código es legible y cumple con el objetivo de la actividad de forma clara y concisa."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra los primeros 15 múltiplos de 3, comenzando desde 3.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es claro y fácil de entender, cumpliendo con todos los requisitos."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas letras 'a' (minúscula) hay en la cadena texto = \"manzana\" y muestra el total.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y fácil de entender. El código funciona como se espera y sigue buenas prácticas."
      },
      {
        "activityDescription": "Usando un ciclo while, calcula y muestra los cuadrados de los números del 1 al 20 (1², 2², …, 20²), cada resultado en una línea.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. Utiliza un ciclo while de forma eficiente y la impresión del resultado es legible."
      },
      {
        "activityDescription": "Con un ciclo for, imprime todos los números pares del 2 al 50 (ambos inclusive), cada número en una línea.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Utiliza el `range` con el paso adecuado para generar solo los números pares, lo cual es eficiente."
      },
      {
        "activityDescription": "Mediante un ciclo while, solicita al usuario que escriba palabras. El proceso termina cuando el usuario escriba la palabra \"fin\". Al final, muestra cuántas palabras se leyeron (sin contar \"fin\").",
        "solutionFile": "src/ejercicio_10.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. Cumple con todos los requisitos del ejercicio. Bien hecho."
      },
      {
        "activityDescription": "Con un ciclo for, imprime cada carácter de la palabra \"python\" en una línea separada.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código es legible y cumple con el objetivo planteado utilizando un bucle for de manera eficiente."
      },
      {
        "activityDescription": "Utilizando un ciclo while, calcula el factorial de un número entero n introducido por el usuario y muestra el resultado.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, bien estructurada y cumple con todos los requisitos de la actividad. El código es legible y utiliza buenas prácticas, como la validación de entrada y el manejo de excepciones."
      },
      {
        "activityDescription": "Con un ciclo for, imprime los números del 1 al 30 saltando de 3 en 3 (1, 4, 7, …, 28), cada número en una línea.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Utiliza el ciclo for y la función range de manera eficiente para lograr el resultado esperado."
      },
      {
        "activityDescription": "Mediante un ciclo while, implementa un juego de adivinanza: el programa genera un número aleatorio del 1 al 10 y solicita al usuario que lo adivine. El proceso se repite hasta que el usuario acierte. Muestra un mensaje de felicitación al final.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, completa y cumple con los requisitos. El código es legible y fácil de entender."
      },
      {
        "activityDescription": "Con un ciclo for, imprime un triángulo rectángulo de 5 filas usando el carácter '*'.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y fácil de entender, cumpliendo con la descripción de la actividad."
      },
      {
        "activityDescription": "Utilizando un ciclo while, simula un reloj digital que muestre cada segundo desde 00:00 hasta 00:59 en formato MM:SS, cada valor en una línea.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y eficiente. El código cumple con los requisitos de la actividad utilizando un bucle while y formateando la salida correctamente."
      },
      {
        "activityDescription": "Con un ciclo for, solicita al usuario que ingrese un número entero positivo y calcula la suma de sus dígitos, mostrando el resultado final.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y legible. El código funciona como se espera y utiliza buenas prácticas al convertir el número a string para iterar sobre los dígitos."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra la secuencia de Fibonacci empezando por 1, 1, 2, 3, 5, … y termina cuando se alcance el primer valor mayor que 1000.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 5,
        "fileFound": true,
        "feedback": "¡Excelente solución! El código es conciso, correcto y eficiente para generar la secuencia de Fibonacci hasta el límite especificado. Muy bien."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas vocales (sin distinción de mayúsculas/minúsculas) hay en la frase frase = \"programacion es divertida\" y muestra el total.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, conciso y resuelve el problema correctamente. Bien hecho al usar `lower()` para asegurar que la cuenta de vocales sea precisa independientemente de las mayúsculas/minúsculas."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese edades una a una. El proceso termina cuando se introduzca -1. Al final, muestra la edad mayor que se haya ingresado.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con el objetivo propuesto."
      }
    ],
    "overallScore": 5,
    "totalActivities": 20,
    "completedActivities": 20,
    "summary": "Excelente trabajo. Completó 20/20 actividades (100%) con una calificación promedio de 5.0/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Continuar con el excelente trabajo y mantener la calidad del código"
    ],
    "evaluatedAt": "2025-08-22T23:20:27.969Z",
    "evaluatedBy": "Sistema de Evaluación"
  },
  "Samuel0490/act_ntp_s3": {
    "repositoryUrl": "Samuel0490/act_ntp_s3",
    "studentName": "samuel alvis bornacelly",
    "activities": [
      {
        "activityDescription": "Usando un ciclo for, imprime los números enteros del 0 al 9, cada uno en una línea.",
        "solutionFile": "src/ejercicio_01.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Sería mejor práctica evitar imprimir el texto \"n = \" y simplemente imprimir el valor de n directamente para cumplir estrictamente con la descripción de la actividad."
      },
      {
        "activityDescription": "Mediante un ciclo while, imprime los números enteros del 10 al 1 en orden descendente, cada número en una línea.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y eficiente. El código cumple con los requisitos del problema de manera óptima."
      },
      {
        "activityDescription": "Con un ciclo for, calcula la suma de todos los enteros del 1 al 100 (inclusive) y muestra el resultado.",
        "solutionFile": "src/ejercicio_03.py",
        "score": 3,
        "fileFound": true,
        "feedback": "El código calcula la suma correctamente, pero imprime la suma parcial en cada iteración del bucle.  Sería mejor imprimir el resultado solo una vez al final, fuera del bucle. Adicionalmente, se puede mejorar la legibilidad y eficiencia utilizando la función `sum` con un generador."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese números. El proceso termina cuando el usuario escriba 0. Al final, muestra la suma total de todos los números ingresados.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Se podría mejorar la validación de entrada para evitar errores si el usuario ingresa algo que no es un número antes de ingresar 0."
      },
      {
        "activityDescription": "Con un ciclo for, imprime la tabla de multiplicar del 7, es decir, 7 × 1, 7 × 2, …, 7 × 10, cada resultado en una línea.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con el objetivo de la actividad sin problemas."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra los primeros 15 múltiplos de 3, comenzando desde 3.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con la descripción de la actividad."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas letras 'a' (minúscula) hay en la cadena texto = \"manzana\" y muestra el total.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con la descripción de la actividad. Bien hecho."
      },
      {
        "activityDescription": "Usando un ciclo while, calcula y muestra los cuadrados de los números del 1 al 20 (1², 2², …, 20²), cada resultado en una línea.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 5,
        "fileFound": true,
        "feedback": "El código resuelve correctamente el problema planteado usando un ciclo while y mostrando los resultados formateados. La solución es clara, concisa y fácil de entender."
      },
      {
        "activityDescription": "Con un ciclo for, imprime todos los números pares del 2 al 50 (ambos inclusive), cada número en una línea.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 3,
        "fileFound": true,
        "feedback": "La primera parte del código (pares) resuelve correctamente el problema. Sin embargo, incluye un segundo bucle que imprime números impares, lo cual no es parte de la descripción de la actividad y reduce la calificación."
      },
      {
        "activityDescription": "Mediante un ciclo while, solicita al usuario que escriba palabras. El proceso termina cuando el usuario escriba la palabra \"fin\". Al final, muestra cuántas palabras se leyeron (sin contar \"fin\").",
        "solutionFile": "src/ejercicio_10.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. Cumple con todos los requisitos y utiliza buenas prácticas."
      },
      {
        "activityDescription": "Con un ciclo for, imprime cada carácter de la palabra \"python\" en una línea separada.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. El código es funcional y fácil de entender."
      },
      {
        "activityDescription": "Utilizando un ciclo while, calcula el factorial de un número entero n introducido por el usuario y muestra el resultado.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, funcional y bien estructurada. El código es legible y cumple con el objetivo de la actividad."
      },
      {
        "activityDescription": "Con un ciclo for, imprime los números del 1 al 30 saltando de 3 en 3 (1, 4, 7, …, 28), cada número en una línea.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Cumple con todos los requisitos de la actividad de manera eficiente."
      },
      {
        "activityDescription": "Mediante un ciclo while, implementa un juego de adivinanza: el programa genera un número aleatorio del 1 al 10 y solicita al usuario que lo adivine. El proceso se repite hasta que el usuario acierte. Muestra un mensaje de felicitación al final.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y completa. El código es limpio y fácil de entender. Cumple con todos los requisitos de la actividad."
      },
      {
        "activityDescription": "Con un ciclo for, imprime un triángulo rectángulo de 5 filas usando el carácter '*'.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con la especificación del problema."
      },
      {
        "activityDescription": "Utilizando un ciclo while, simula un reloj digital que muestre cada segundo desde 00:00 hasta 00:59 en formato MM:SS, cada valor en una línea.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con todos los requisitos de la actividad."
      },
      {
        "activityDescription": "Con un ciclo for, solicita al usuario que ingrese un número entero positivo y calcula la suma de sus dígitos, mostrando el resultado final.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 5,
        "fileFound": true,
        "feedback": "El código resuelve correctamente el problema planteado de forma concisa y legible. Utiliza un bucle for para iterar sobre los dígitos y calcular la suma."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra la secuencia de Fibonacci empezando por 1, 1, 2, 3, 5, … y termina cuando se alcance el primer valor mayor que 1000.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código es legible y cumple con los requisitos del ejercicio."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas vocales (sin distinción de mayúsculas/minúsculas) hay en la frase frase = \"programacion es divertida\" y muestra el total.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y eficiente. El código es legible y cumple con los requisitos del problema."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese edades una a una. El proceso termina cuando se introduzca -1. Al final, muestra la edad mayor que se haya ingresado.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con los requisitos de la actividad. Buen trabajo."
      }
    ],
    "overallScore": 4.7,
    "totalActivities": 20,
    "completedActivities": 20,
    "summary": "Excelente trabajo. Completó 20/20 actividades (100%) con una calificación promedio de 4.7/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Continuar con el excelente trabajo y mantener la calidad del código"
    ],
    "evaluatedAt": "2025-08-23T00:57:09.004Z",
    "evaluatedBy": "Sistema de Evaluación"
  },
  "Santiago-diazu/act_ntp_s3": {
    "repositoryUrl": "Santiago-diazu/act_ntp_s3",
    "studentName": "Santiago Diaz Usma",
    "activities": [
      {
        "activityDescription": "Usando un ciclo for, imprime los números enteros del 0 al 9, cada uno en una línea.",
        "solutionFile": "src/ejercicio_01.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y cumple con el objetivo. Se podría mejorar la presentación de la salida, imprimiendo solo el número en lugar de 'numero = numero'."
      },
      {
        "activityDescription": "Mediante un ciclo while, imprime los números enteros del 10 al 1 en orden descendente, cada número en una línea.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y cumple con todos los requisitos. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Con un ciclo for, calcula la suma de todos los enteros del 1 al 100 (inclusive) y muestra el resultado.",
        "solutionFile": "src/ejercicio_03.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, fácil de entender y resuelve correctamente el problema planteado. No hay mejoras significativas que sugerir."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese números. El proceso termina cuando el usuario escriba 0. Al final, muestra la suma total de todos los números ingresados.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y fácil de entender, cumpliendo con los requisitos de la actividad."
      },
      {
        "activityDescription": "Con un ciclo for, imprime la tabla de multiplicar del 7, es decir, 7 × 1, 7 × 2, …, 7 × 10, cada resultado en una línea.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y funcional. El código es legible y cumple con los requisitos del ejercicio."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra los primeros 15 múltiplos de 3, comenzando desde 3.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y fácil de entender. ¡Excelente trabajo!"
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas letras 'a' (minúscula) hay en la cadena texto = \"manzana\" y muestra el total.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con el objetivo planteado. ¡Buen trabajo!"
      },
      {
        "activityDescription": "Usando un ciclo while, calcula y muestra los cuadrados de los números del 1 al 20 (1², 2², …, 20²), cada resultado en una línea.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código es legible y cumple con el objetivo planteado, utilizando un ciclo `while` de manera eficiente."
      },
      {
        "activityDescription": "Con un ciclo for, imprime todos los números pares del 2 al 50 (ambos inclusive), cada número en una línea.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, fácil de entender y cumple con todos los requisitos de la actividad."
      },
      {
        "activityDescription": "Mediante un ciclo while, solicita al usuario que escriba palabras. El proceso termina cuando el usuario escriba la palabra \"fin\". Al final, muestra cuántas palabras se leyeron (sin contar \"fin\").",
        "solutionFile": "src/ejercicio_10.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y cumple con los requisitos. El código es legible y funcional."
      },
      {
        "activityDescription": "Con un ciclo for, imprime cada carácter de la palabra \"python\" en una línea separada.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución funciona correctamente, pero el enunciado pedía imprimir la palabra 'python'. Se puede mejorar quitando el `input` para que imprima directamente 'python'. Buen uso del `for`."
      },
      {
        "activityDescription": "Utilizando un ciclo while, calcula el factorial de un número entero n introducido por el usuario y muestra el resultado.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 4,
        "fileFound": true,
        "feedback": "El código calcula correctamente el factorial usando un ciclo while. Sin embargo, el mensaje final es incorrecto (imprime el factorial de 1 en lugar de n), considera usar la variable original `n` en el `print` para una mejor experiencia de usuario."
      },
      {
        "activityDescription": "Con un ciclo for, imprime los números del 1 al 30 saltando de 3 en 3 (1, 4, 7, …, 28), cada número en una línea.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y eficiente. El código cumple con la descripción de la actividad y está bien estructurado."
      },
      {
        "activityDescription": "Mediante un ciclo while, implementa un juego de adivinanza: el programa genera un número aleatorio del 1 al 10 y solicita al usuario que lo adivine. El proceso se repite hasta que el usuario acierte. Muestra un mensaje de felicitación al final.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y bien estructurada. El código cumple con la descripción de la actividad y utiliza buenas prácticas (manejo de excepciones)."
      },
      {
        "activityDescription": "Con un ciclo for, imprime un triángulo rectángulo de 5 filas usando el carácter '*'.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, funcional y cumple con los requisitos de la actividad. No hay áreas de mejora evidentes."
      },
      {
        "activityDescription": "Utilizando un ciclo while, simula un reloj digital que muestre cada segundo desde 00:00 hasta 00:59 en formato MM:SS, cada valor en una línea.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. Utiliza `time.sleep(1)` para simular el segundo y el formato f-string para mostrar los números con ceros a la izquierda, cumpliendo con todos los requisitos."
      },
      {
        "activityDescription": "Con un ciclo for, solicita al usuario que ingrese un número entero positivo y calcula la suma de sus dígitos, mostrando el resultado final.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, legible y cumple con los requisitos de la actividad.  Considera agregar validación para asegurar que la entrada sea un número entero positivo."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra la secuencia de Fibonacci empezando por 1, 1, 2, 3, 5, … y termina cuando se alcance el primer valor mayor que 1000.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y eficiente. Utiliza una asignación simultánea para actualizar los valores de Fibonacci, lo cual es una buena práctica."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas vocales (sin distinción de mayúsculas/minúsculas) hay en la frase frase = \"programacion es divertida\" y muestra el total.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y eficiente. El código cumple con la descripción de la actividad y está bien estructurado."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese edades una a una. El proceso termina cuando se introduzca -1. Al final, muestra la edad mayor que se haya ingresado.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y completa. El código es claro, legible y maneja adecuadamente las excepciones y el caso de no ingresar edades."
      }
    ],
    "overallScore": 4.85,
    "totalActivities": 20,
    "completedActivities": 20,
    "summary": "Excelente trabajo. Completó 20/20 actividades (100%) con una calificación promedio de 4.8/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Continuar con el excelente trabajo y mantener la calidad del código"
    ],
    "evaluatedAt": "2025-08-23T01:03:48.957Z",
    "evaluatedBy": "Sistema de Evaluación"
  },
  "leandro760/act_ntp_s3": {
    "repositoryUrl": "leandro760/act_ntp_s3",
    "studentName": "Leandro Alberto  Acevedo Zapata",
    "activities": [
      {
        "activityDescription": "Usando un ciclo for, imprime los números enteros del 0 al 9, cada uno en una línea.",
        "solutionFile": "src/ejercicio_01.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y cumple con el requerimiento. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Mediante un ciclo while, imprime los números enteros del 10 al 1 en orden descendente, cada número en una línea.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es claro, conciso y cumple con los requisitos del ejercicio sin problemas."
      },
      {
        "activityDescription": "Con un ciclo for, calcula la suma de todos los enteros del 1 al 100 (inclusive) y muestra el resultado.",
        "solutionFile": "src/ejercicio_03.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y eficiente. El código es limpio y cumple con el objetivo planteado de forma óptima."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese números. El proceso termina cuando el usuario escriba 0. Al final, muestra la suma total de todos los números ingresados.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y cumple con todos los requisitos. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Con un ciclo for, imprime la tabla de multiplicar del 7, es decir, 7 × 1, 7 × 2, …, 7 × 10, cada resultado en una línea.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, conciso y cumple con los requisitos de la actividad.  Bien hecho!"
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra los primeros 15 múltiplos de 3, comenzando desde 3.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con el objetivo planteado."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas letras 'a' (minúscula) hay en la cadena texto = \"manzana\" y muestra el total.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Se recomienda usar la variable 'palabra' con el valor 'manzana' como se especificó en la descripción del problema, no 'manzanas'. Además, la F-string podría mejorar incluyendo directamente el valor de 'contador'."
      },
      {
        "activityDescription": "Usando un ciclo while, calcula y muestra los cuadrados de los números del 1 al 20 (1², 2², …, 20²), cada resultado en una línea.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y eficiente. El código cumple con la descripción de la actividad y es fácil de entender."
      },
      {
        "activityDescription": "Con un ciclo for, imprime todos los números pares del 2 al 50 (ambos inclusive), cada número en una línea.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, funcional y sigue las buenas prácticas para resolver el problema planteado. El uso del `range` con paso 2 es muy eficiente."
      },
      {
        "activityDescription": "Mediante un ciclo while, solicita al usuario que escriba palabras. El proceso termina cuando el usuario escriba la palabra \"fin\". Al final, muestra cuántas palabras se leyeron (sin contar \"fin\").",
        "solutionFile": "src/ejercicio_10.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y cumple con todos los requisitos. El código es legible y fácil de entender, demostrando buenas prácticas."
      },
      {
        "activityDescription": "Con un ciclo for, imprime cada carácter de la palabra \"python\" en una línea separada.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 5,
        "fileFound": true,
        "feedback": "¡Excelente solución! El código es conciso, claro y resuelve el problema planteado de manera eficiente. Se aplicaron correctamente las buenas prácticas."
      },
      {
        "activityDescription": "Utilizando un ciclo while, calcula el factorial de un número entero n introducido por el usuario y muestra el resultado.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. El código es legible y sigue buenas prácticas al guardar el valor original para mostrarlo al final."
      },
      {
        "activityDescription": "Con un ciclo for, imprime los números del 1 al 30 saltando de 3 en 3 (1, 4, 7, …, 28), cada número en una línea.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es claro y fácil de entender, utilizando el ciclo `for` y la función `range` de manera adecuada."
      },
      {
        "activityDescription": "Mediante un ciclo while, implementa un juego de adivinanza: el programa genera un número aleatorio del 1 al 10 y solicita al usuario que lo adivine. El proceso se repite hasta que el usuario acierte. Muestra un mensaje de felicitación al final.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, funcional y cumple con todos los requisitos de la actividad. Bien hecho."
      },
      {
        "activityDescription": "Con un ciclo for, imprime un triángulo rectángulo de 5 filas usando el carácter '*'.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. El código cumple con la descripción de la actividad y utiliza buenas prácticas."
      },
      {
        "activityDescription": "Utilizando un ciclo while, simula un reloj digital que muestre cada segundo desde 00:00 hasta 00:59 en formato MM:SS, cada valor en una línea.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución funciona correctamente y cumple con el objetivo. Podrías generalizar el código para que funcione con cualquier rango de minutos, no solo con el minuto 0. Considera usar un ciclo `for` en lugar de `while` para mejor legibilidad en este caso."
      },
      {
        "activityDescription": "Con un ciclo for, solicita al usuario que ingrese un número entero positivo y calcula la suma de sus dígitos, mostrando el resultado final.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, legible y resuelve correctamente el problema planteado. ¡Bien hecho!"
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra la secuencia de Fibonacci empezando por 1, 1, 2, 3, 5, … y termina cuando se alcance el primer valor mayor que 1000.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La lógica para la secuencia de Fibonacci es correcta, pero el límite superior (1598) está hardcodeado. Deberías usar 1000 como límite, como indica la descripción, para una solución más general y adaptable."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas vocales (sin distinción de mayúsculas/minúsculas) hay en la frase frase = \"programacion es divertida\" y muestra el total.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. El código cumple con el objetivo de contar las vocales en la frase dada y es fácil de entender. ¡Excelente trabajo!"
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese edades una a una. El proceso termina cuando se introduzca -1. Al final, muestra la edad mayor que se haya ingresado.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, eficiente y cumple con todos los requisitos. El código es limpio y fácil de entender. ¡Excelente trabajo!"
      }
    ],
    "overallScore": 4.85,
    "totalActivities": 20,
    "completedActivities": 20,
    "summary": "Excelente trabajo. Completó 20/20 actividades (100%) con una calificación promedio de 4.8/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Continuar con el excelente trabajo y mantener la calidad del código"
    ],
    "evaluatedAt": "2025-08-23T01:08:31.143Z",
    "evaluatedBy": "Sistema de Evaluación"
  },
  "JuanRivera24/act_ntp_s3": {
    "repositoryUrl": "JuanRivera24/act_ntp_s3",
    "studentName": "Juan Manuel Rivera Restrepo",
    "activities": [
      {
        "activityDescription": "Usando un ciclo for, imprime los números enteros del 0 al 9, cada uno en una línea.",
        "solutionFile": "src/ejercicio_01.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Cumple con todos los requisitos de la actividad."
      },
      {
        "activityDescription": "Mediante un ciclo while, imprime los números enteros del 10 al 1 en orden descendente, cada número en una línea.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y cumple con los requisitos de la actividad. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Con un ciclo for, calcula la suma de todos los enteros del 1 al 100 (inclusive) y muestra el resultado.",
        "solutionFile": "src/ejercicio_03.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es claro, conciso y cumple con los requisitos del problema."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese números. El proceso termina cuando el usuario escriba 0. Al final, muestra la suma total de todos los números ingresados.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, legible y cumple con todos los requisitos de la actividad. Bien hecho."
      },
      {
        "activityDescription": "Con un ciclo for, imprime la tabla de multiplicar del 7, es decir, 7 × 1, 7 × 2, …, 7 × 10, cada resultado en una línea.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código es limpio y cumple con el objetivo del ejercicio."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra los primeros 15 múltiplos de 3, comenzando desde 3.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 3,
        "fileFound": true,
        "feedback": "El código genera múltiplos de 3, pero el bucle termina cuando i es igual a 15 en lugar de generar los primeros 15 múltiplos. El código necesita iterar más veces o tener una condición de parada diferente."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas letras 'a' (minúscula) hay en la cadena texto = \"manzana\" y muestra el total.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio, fácil de entender y cumple con el objetivo planteado."
      },
      {
        "activityDescription": "Usando un ciclo while, calcula y muestra los cuadrados de los números del 1 al 20 (1², 2², …, 20²), cada resultado en una línea.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y eficiente. El código es limpio y fácil de entender, cumpliendo con todos los requisitos de la actividad."
      },
      {
        "activityDescription": "Con un ciclo for, imprime todos los números pares del 2 al 50 (ambos inclusive), cada número en una línea.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, eficiente y concisa. Utiliza el ciclo for con un paso adecuado para imprimir los números pares en el rango especificado."
      },
      {
        "activityDescription": "Mediante un ciclo while, solicita al usuario que escriba palabras. El proceso termina cuando el usuario escriba la palabra \"fin\". Al final, muestra cuántas palabras se leyeron (sin contar \"fin\").",
        "solutionFile": "src/ejercicio_10.py",
        "score": 3,
        "fileFound": true,
        "feedback": "El código funciona, pero no cuenta las palabras correctamente y también imprime la palabra 'fin'.  Deberías usar un contador y evitar imprimir 'fin'."
      },
      {
        "activityDescription": "Con un ciclo for, imprime cada carácter de la palabra \"python\" en una línea separada.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y cumple con los requisitos. El código es conciso y legible."
      },
      {
        "activityDescription": "Utilizando un ciclo while, calcula el factorial de un número entero n introducido por el usuario y muestra el resultado.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, eficiente y legible. Utiliza un ciclo `while` de forma apropiada para calcular el factorial."
      },
      {
        "activityDescription": "Con un ciclo for, imprime los números del 1 al 30 saltando de 3 en 3 (1, 4, 7, …, 28), cada número en una línea.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y fácil de entender, cumpliendo con la descripción de la actividad."
      },
      {
        "activityDescription": "Mediante un ciclo while, implementa un juego de adivinanza: el programa genera un número aleatorio del 1 al 10 y solicita al usuario que lo adivine. El proceso se repite hasta que el usuario acierte. Muestra un mensaje de felicitación al final.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 3,
        "fileFound": true,
        "feedback": "La lógica del ciclo while no es la correcta. Se genera un nuevo número aleatorio en cada iteración, en lugar de compararlo con la entrada del usuario. Deberías generar el número aleatorio una sola vez fuera del ciclo y mantenerlo constante."
      },
      {
        "activityDescription": "Con un ciclo for, imprime un triángulo rectángulo de 5 filas usando el carácter '*'.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 2,
        "fileFound": true,
        "feedback": "El código imprime un rectángulo, no un triángulo rectángulo. La cantidad de asteriscos en cada fila debería incrementarse con el número de fila."
      },
      {
        "activityDescription": "Utilizando un ciclo while, simula un reloj digital que muestre cada segundo desde 00:00 hasta 00:59 en formato MM:SS, cada valor en una línea.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 3,
        "fileFound": true,
        "feedback": "El código muestra un reloj, pero no se limita al rango 00:00-00:59 como se solicitó en la descripción. Además, el ciclo `while True` hace que el programa se ejecute indefinidamente sin cumplir con el objetivo especificado."
      },
      {
        "activityDescription": "Con un ciclo for, solicita al usuario que ingrese un número entero positivo y calcula la suma de sus dígitos, mostrando el resultado final.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional, calcula la suma de los dígitos de un número entero positivo. Sin embargo, la actividad solicitaba el uso de un ciclo `for`, mientras que el código utiliza un ciclo `while`. Considera usar un ciclo `for` como se especificó en la descripción."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra la secuencia de Fibonacci empezando por 1, 1, 2, 3, 5, … y termina cuando se alcance el primer valor mayor que 1000.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 3,
        "fileFound": true,
        "feedback": "El código parece intentar generar la secuencia de Fibonacci, pero falta inicializar la variable 'anterior'. Además, la lógica para calcular el siguiente número de Fibonacci es incorrecta, y no se inicializa el primer valor de la secuencia (1). La condición `numero < 1001` es correcta para detener la secuencia."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas vocales (sin distinción de mayúsculas/minúsculas) hay en la frase frase = \"programacion es divertida\" y muestra el total.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 1,
        "fileFound": true,
        "feedback": "El código no resuelve el problema planteado. Está contando letras mayúsculas en lugar de vocales.  Debes revisar la lógica de la condición dentro del bucle for."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese edades una a una. El proceso termina cuando se introduzca -1. Al final, muestra la edad mayor que se haya ingresado.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código resuelve correctamente el problema, es legible y utiliza buenas prácticas como la validación de lista vacía antes de buscar el máximo."
      }
    ],
    "overallScore": 4.1,
    "totalActivities": 20,
    "completedActivities": 20,
    "summary": "Excelente trabajo. Completó 20/20 actividades (100%) con una calificación promedio de 4.1/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Revisar y mejorar las actividades con calificación baja"
    ],
    "evaluatedAt": "2025-08-23T01:30:27.873Z",
    "evaluatedBy": "Sistema de Evaluación"
  },
  "yorman-usme/act_ntp_s3": {
    "repositoryUrl": "yorman-usme/act_ntp_s3",
    "studentName": "Yorman Ivan Usme Hernandez",
    "activities": [
      {
        "activityDescription": "Usando un ciclo for, imprime los números enteros del 0 al 9, cada uno en una línea.",
        "solutionFile": "src/ejercicio_01.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código es legible y cumple con el objetivo de la actividad."
      },
      {
        "activityDescription": "Mediante un ciclo while, imprime los números enteros del 10 al 1 en orden descendente, cada número en una línea.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y cumple con los requisitos. El código es legible y utiliza buenas prácticas para la tarea."
      },
      {
        "activityDescription": "Con un ciclo for, calcula la suma de todos los enteros del 1 al 100 (inclusive) y muestra el resultado.",
        "solutionFile": "src/ejercicio_03.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y fácil de entender, cumpliendo con el objetivo planteado."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese números. El proceso termina cuando el usuario escriba 0. Al final, muestra la suma total de todos los números ingresados.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con los requisitos de la actividad. ¡Buen trabajo!"
      },
      {
        "activityDescription": "Con un ciclo for, imprime la tabla de multiplicar del 7, es decir, 7 × 1, 7 × 2, …, 7 × 10, cada resultado en una línea.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, conciso y cumple perfectamente con los requerimientos del ejercicio. Muy bien el uso de f-strings para formatear la salida."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra los primeros 15 múltiplos de 3, comenzando desde 3.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Cumple con todos los requisitos de la actividad utilizando un ciclo while de manera eficiente."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas letras 'a' (minúscula) hay en la cadena texto = \"manzana\" y muestra el total.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es claro, conciso y cumple con el objetivo planteado."
      },
      {
        "activityDescription": "Usando un ciclo while, calcula y muestra los cuadrados de los números del 1 al 20 (1², 2², …, 20²), cada resultado en una línea.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y cumple con todos los requisitos del ejercicio. El código es legible y eficiente."
      },
      {
        "activityDescription": "Con un ciclo for, imprime todos los números pares del 2 al 50 (ambos inclusive), cada número en una línea.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y eficiente. Utiliza el `range` con el paso adecuado para generar solo los números pares, lo cual es una buena práctica."
      },
      {
        "activityDescription": "Mediante un ciclo while, solicita al usuario que escriba palabras. El proceso termina cuando el usuario escriba la palabra \"fin\". Al final, muestra cuántas palabras se leyeron (sin contar \"fin\").",
        "solutionFile": "src/ejercicio_10.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código es legible y cumple con los requisitos de la actividad."
      },
      {
        "activityDescription": "Con un ciclo for, imprime cada carácter de la palabra \"python\" en una línea separada.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 5,
        "fileFound": true,
        "feedback": "¡Excelente! La solución es correcta, concisa y cumple con el objetivo de la actividad. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Utilizando un ciclo while, calcula el factorial de un número entero n introducido por el usuario y muestra el resultado.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 3,
        "fileFound": true,
        "feedback": "El código calcula el factorial correctamente usando un ciclo while, pero falta la entrada del número 'n' por parte del usuario. Deberías incluir la solicitud de entrada para que el programa sea funcional según la descripción."
      },
      {
        "activityDescription": "Con un ciclo for, imprime los números del 1 al 30 saltando de 3 en 3 (1, 4, 7, …, 28), cada número en una línea.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código es legible y cumple con la descripción de la actividad usando un ciclo `for` con el rango y el paso adecuados."
      },
      {
        "activityDescription": "Mediante un ciclo while, implementa un juego de adivinanza: el programa genera un número aleatorio del 1 al 10 y solicita al usuario que lo adivine. El proceso se repite hasta que el usuario acierte. Muestra un mensaje de felicitación al final.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La lógica del juego es correcta, pero falta retroalimentación al usuario sobre si el número ingresado es mayor o menor al secreto. Considera validar la entrada del usuario para evitar errores si no ingresa un número."
      },
      {
        "activityDescription": "Con un ciclo for, imprime un triángulo rectángulo de 5 filas usando el carácter '*'.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código es legible y cumple con la descripción de la actividad. ¡Excelente trabajo!"
      },
      {
        "activityDescription": "Utilizando un ciclo while, simula un reloj digital que muestre cada segundo desde 00:00 hasta 00:59 en formato MM:SS, cada valor en una línea.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y cumple con todos los requisitos. El código es legible y utiliza el formato de cadena f-string de manera efectiva para mostrar los números con ceros iniciales."
      },
      {
        "activityDescription": "Con un ciclo for, solicita al usuario que ingrese un número entero positivo y calcula la suma de sus dígitos, mostrando el resultado final.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Se podría mejorar validando que la entrada sea un número entero positivo y agregando comentarios más descriptivos."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra la secuencia de Fibonacci empezando por 1, 1, 2, 3, 5, … y termina cuando se alcance el primer valor mayor que 1000.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y eficiente. Cumple con todos los requisitos de la actividad."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas vocales (sin distinción de mayúsculas/minúsculas) hay en la frase frase = \"programacion es divertida\" y muestra el total.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y utiliza buenas prácticas al convertir la frase a minúsculas para simplificar la comparación."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese edades una a una. El proceso termina cuando se introduzca -1. Al final, muestra la edad mayor que se haya ingresado.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. El código funciona como se espera y cumple con la descripción del problema."
      }
    ],
    "overallScore": 4.8,
    "totalActivities": 20,
    "completedActivities": 20,
    "summary": "Excelente trabajo. Completó 20/20 actividades (100%) con una calificación promedio de 4.8/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Continuar con el excelente trabajo y mantener la calidad del código"
    ],
    "evaluatedAt": "2025-08-28T12:45:20.931Z",
    "evaluatedBy": "Sistema de Evaluación"
  },
  "Spuerta18/act_ntp_s3": {
    "repositoryUrl": "Spuerta18/act_ntp_s3",
    "studentName": "Santiago Puerta Sierra",
    "activities": [
      {
        "activityDescription": "Usando un ciclo for, imprime los números enteros del 0 al 9, cada uno en una línea.",
        "solutionFile": "src/ejercicio_01.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y cumple con todos los requisitos de la actividad. El código es legible y utiliza buenas prácticas."
      },
      {
        "activityDescription": "Mediante un ciclo while, imprime los números enteros del 10 al 1 en orden descendente, cada número en una línea.",
        "solutionFile": "src/ejercicio_02.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y fácil de entender. El código cumple con el objetivo de la actividad utilizando un ciclo while y decrementando la variable correctamente."
      },
      {
        "activityDescription": "Con un ciclo for, calcula la suma de todos los enteros del 1 al 100 (inclusive) y muestra el resultado.",
        "solutionFile": "src/ejercicio_03.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y fácil de entender, cumpliendo con el objetivo de la actividad."
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese números. El proceso termina cuando el usuario escriba 0. Al final, muestra la suma total de todos los números ingresados.",
        "solutionFile": "src/ejercicio_04.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. El código cumple con la funcionalidad descrita y utiliza buenas prácticas al inicializar la variable 'numero' con 'None' para evitar errores en la primera iteración."
      },
      {
        "activityDescription": "Con un ciclo for, imprime la tabla de multiplicar del 7, es decir, 7 × 1, 7 × 2, …, 7 × 10, cada resultado en una línea.",
        "solutionFile": "src/ejercicio_05.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, legible y cumple perfectamente con los requisitos de la actividad. Bien hecho."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra los primeros 15 múltiplos de 3, comenzando desde 3.",
        "solutionFile": "src/ejercicio_06.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Solución correcta y eficiente. El código es limpio, fácil de entender y cumple con los requisitos de la actividad. Buen trabajo."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas letras 'a' (minúscula) hay en la cadena texto = \"manzana\" y muestra el total.",
        "solutionFile": "src/ejercicio_07.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, legible y resuelve el problema correctamente. Demuestra una buena comprensión del uso de ciclos y condicionales."
      },
      {
        "activityDescription": "Usando un ciclo while, calcula y muestra los cuadrados de los números del 1 al 20 (1², 2², …, 20²), cada resultado en una línea.",
        "solutionFile": "src/ejercicio_08.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es legible y cumple con el objetivo planteado de manera óptima."
      },
      {
        "activityDescription": "Con un ciclo for, imprime todos los números pares del 2 al 50 (ambos inclusive), cada número en una línea.",
        "solutionFile": "src/ejercicio_09.py",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 503 . {\"error\":{\"code\":503,\"message\":\"The model is overloaded. Please try again later.\",\"status\":\"UNAVAILABLE\"}}"
      },
      {
        "activityDescription": "Mediante un ciclo while, solicita al usuario que escriba palabras. El proceso termina cuando el usuario escriba la palabra \"fin\". Al final, muestra cuántas palabras se leyeron (sin contar \"fin\").",
        "solutionFile": "src/ejercicio_10.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y cumple con los requisitos del problema. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Con un ciclo for, imprime cada carácter de la palabra \"python\" en una línea separada.",
        "solutionFile": "src/ejercicio_11.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código es legible y cumple con el objetivo de la actividad."
      },
      {
        "activityDescription": "Utilizando un ciclo while, calcula el factorial de un número entero n introducido por el usuario y muestra el resultado.",
        "solutionFile": "src/ejercicio_12.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código calcula correctamente el factorial utilizando un ciclo while y es fácil de entender. Bien hecho."
      },
      {
        "activityDescription": "Con un ciclo for, imprime los números del 1 al 30 saltando de 3 en 3 (1, 4, 7, …, 28), cada número en una línea.",
        "solutionFile": "src/ejercicio_13.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y cumple con los requisitos de la actividad. El código es legible y utiliza el `range` de forma adecuada."
      },
      {
        "activityDescription": "Mediante un ciclo while, implementa un juego de adivinanza: el programa genera un número aleatorio del 1 al 10 y solicita al usuario que lo adivine. El proceso se repite hasta que el usuario acierte. Muestra un mensaje de felicitación al final.",
        "solutionFile": "src/ejercicio_14.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y completa, cumple con todos los requisitos del problema. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Con un ciclo for, imprime un triángulo rectángulo de 5 filas usando el carácter '*'.",
        "solutionFile": "src/ejercicio_15.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Solución correcta y concisa. El código cumple con la descripción de la actividad y utiliza una forma eficiente de imprimir el triángulo."
      },
      {
        "activityDescription": "Utilizando un ciclo while, simula un reloj digital que muestre cada segundo desde 00:00 hasta 00:59 en formato MM:SS, cada valor en una línea.",
        "solutionFile": "src/ejercicio_16.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, funcional y cumple con todos los requisitos de la actividad, incluyendo el formato de salida y la pausa de un segundo."
      },
      {
        "activityDescription": "Con un ciclo for, solicita al usuario que ingrese un número entero positivo y calcula la suma de sus dígitos, mostrando el resultado final.",
        "solutionFile": "src/ejercicio_17.py",
        "score": 4,
        "fileFound": true,
        "feedback": "El código resuelve correctamente la actividad. Podría incluirse validación para asegurar que el número ingresado sea positivo y tenga al menos dos cifras, mejorando la robustez del programa."
      },
      {
        "activityDescription": "Mediante un ciclo while, genera y muestra la secuencia de Fibonacci empezando por 1, 1, 2, 3, 5, … y termina cuando se alcance el primer valor mayor que 1000.",
        "solutionFile": "src/ejercicio_18.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código es legible y cumple con el objetivo de generar la secuencia de Fibonacci hasta el primer valor mayor a 1000."
      },
      {
        "activityDescription": "Con un ciclo for, cuenta cuántas vocales (sin distinción de mayúsculas/minúsculas) hay en la frase frase = \"programacion es divertida\" y muestra el total.",
        "solutionFile": "src/ejercicio_19.py",
        "score": 5,
        "fileFound": true,
        "feedback": "Solución correcta y eficiente. El código es limpio, legible y cumple con todos los requisitos del problema. ¡Excelente trabajo!"
      },
      {
        "activityDescription": "Utilizando un ciclo while, solicita al usuario que ingrese edades una a una. El proceso termina cuando se introduzca -1. Al final, muestra la edad mayor que se haya ingresado.",
        "solutionFile": "src/ejercicio_20.py",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y eficiente. El código sigue buenas prácticas y resuelve el problema planteado sin errores."
      }
    ],
    "overallScore": 4.7,
    "totalActivities": 20,
    "completedActivities": 19,
    "summary": "Excelente trabajo. Completó 19/20 actividades (95%) con una calificación promedio de 4.7/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Completar los archivos faltantes: src/ejercicio_09.py"
    ],
    "evaluatedAt": "2025-08-28T12:48:12.812Z",
    "evaluatedBy": "Sistema de Evaluación"
  }
}